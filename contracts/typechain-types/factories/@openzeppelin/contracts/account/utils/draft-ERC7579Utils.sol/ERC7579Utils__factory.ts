/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  ERC7579Utils,
  ERC7579UtilsInterface,
} from "../../../../../../@openzeppelin/contracts/account/utils/draft-ERC7579Utils.sol/ERC7579Utils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "moduleTypeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "ERC7579AlreadyInstalledModule",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC7579DecodingError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "moduleTypeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "ERC7579MismatchedModuleTypeId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "moduleTypeId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "module",
        type: "address",
      },
    ],
    name: "ERC7579UninstalledModule",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "CallType",
        name: "callType",
        type: "bytes1",
      },
    ],
    name: "ERC7579UnsupportedCallType",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "ExecType",
        name: "execType",
        type: "bytes1",
      },
    ],
    name: "ERC7579UnsupportedExecType",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "moduleTypeId",
        type: "uint256",
      },
    ],
    name: "ERC7579UnsupportedModuleType",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "batchExecutionIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "returndata",
        type: "bytes",
      },
    ],
    name: "ERC7579TryExecuteFail",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122035a6aa687e21e79f53fa6a35a10f64aa186a2b0eab844fca9f2485f95e51114564736f6c634300081c0033";

type ERC7579UtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC7579UtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC7579Utils__factory extends ContractFactory {
  constructor(...args: ERC7579UtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC7579Utils & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC7579Utils__factory {
    return super.connect(runner) as ERC7579Utils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC7579UtilsInterface {
    return new Interface(_abi) as ERC7579UtilsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC7579Utils {
    return new Contract(address, _abi, runner) as unknown as ERC7579Utils;
  }
}
