/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  ERC7739Utils,
  ERC7739UtilsInterface,
} from "../../../../../../@openzeppelin/community-contracts/contracts/utils/cryptography/ERC7739Utils";

const _abi = [
  {
    inputs: [],
    name: "InvalidContentsType",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212203447551d4495de9a7403dc35a33ff4a62cda6bc0d18a996617771298251b413364736f6c634300081c0033";

type ERC7739UtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC7739UtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC7739Utils__factory extends ContractFactory {
  constructor(...args: ERC7739UtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC7739Utils & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC7739Utils__factory {
    return super.connect(runner) as ERC7739Utils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC7739UtilsInterface {
    return new Interface(_abi) as ERC7739UtilsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ERC7739Utils {
    return new Contract(address, _abi, runner) as unknown as ERC7739Utils;
  }
}
