/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace SocialRecoveryModule {
  export type GuardianSignatureStruct = {
    signature: BytesLike;
    signer: AddressLike;
  };

  export type GuardianSignatureStructOutput = [
    signature: string,
    signer: string
  ] & { signature: string; signer: string };
}

export interface SocialRecoveryModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addGuardian"
      | "cancelRecovery()"
      | "cancelRecovery(address,(bytes,address)[])"
      | "eip712Domain"
      | "executeRecovery"
      | "getGuardians"
      | "getMaxGuardians"
      | "getRecoveryStatus"
      | "getThreshold"
      | "getTimelock"
      | "isGuardian"
      | "isModuleType"
      | "nonces"
      | "onInstall"
      | "onUninstall"
      | "removeGuardian"
      | "startRecovery"
      | "updateThreshold"
      | "updateTimelock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "GuardianAdded"
      | "GuardianRemoved"
      | "ModuleInstalledReceived"
      | "ModuleUninstalledReceived"
      | "RecoveryCancelled"
      | "RecoveryExecuted"
      | "RecoveryStarted"
      | "ThresholdChanged"
      | "TimelockChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRecovery()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRecovery(address,(bytes,address)[])",
    values: [AddressLike, SocialRecoveryModule.GuardianSignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRecovery",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGuardians",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxGuardians",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimelock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isGuardian",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startRecovery",
    values: [
      AddressLike,
      SocialRecoveryModule.GuardianSignatureStruct[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimelock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRecovery()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRecovery(address,(bytes,address)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGuardians",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxGuardians",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startRecovery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimelock",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuardianAddedEvent {
  export type InputTuple = [account: AddressLike, guardian: AddressLike];
  export type OutputTuple = [account: string, guardian: string];
  export interface OutputObject {
    account: string;
    guardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuardianRemovedEvent {
  export type InputTuple = [account: AddressLike, guardian: AddressLike];
  export type OutputTuple = [account: string, guardian: string];
  export interface OutputObject {
    account: string;
    guardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleInstalledReceivedEvent {
  export type InputTuple = [account: AddressLike, data: BytesLike];
  export type OutputTuple = [account: string, data: string];
  export interface OutputObject {
    account: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUninstalledReceivedEvent {
  export type InputTuple = [account: AddressLike, data: BytesLike];
  export type OutputTuple = [account: string, data: string];
  export interface OutputObject {
    account: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryCancelledEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryExecutedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryStartedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdChangedEvent {
  export type InputTuple = [account: AddressLike, threshold: BigNumberish];
  export type OutputTuple = [account: string, threshold: bigint];
  export interface OutputObject {
    account: string;
    threshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TimelockChangedEvent {
  export type InputTuple = [account: AddressLike, timelock: BigNumberish];
  export type OutputTuple = [account: string, timelock: bigint];
  export interface OutputObject {
    account: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SocialRecoveryModule extends BaseContract {
  connect(runner?: ContractRunner | null): SocialRecoveryModule;
  waitForDeployment(): Promise<this>;

  interface: SocialRecoveryModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addGuardian: TypedContractMethod<
    [guardian: AddressLike],
    [void],
    "nonpayable"
  >;

  "cancelRecovery()": TypedContractMethod<[], [void], "nonpayable">;

  "cancelRecovery(address,(bytes,address)[])": TypedContractMethod<
    [
      account: AddressLike,
      guardianSignatures: SocialRecoveryModule.GuardianSignatureStruct[]
    ],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  executeRecovery: TypedContractMethod<
    [account: AddressLike, executionCalldata: BytesLike],
    [void],
    "nonpayable"
  >;

  getGuardians: TypedContractMethod<[account: AddressLike], [string[]], "view">;

  getMaxGuardians: TypedContractMethod<[], [bigint], "view">;

  getRecoveryStatus: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getThreshold: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getTimelock: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  isGuardian: TypedContractMethod<
    [account: AddressLike, guardian: AddressLike],
    [boolean],
    "view"
  >;

  isModuleType: TypedContractMethod<
    [moduleTypeId: BigNumberish],
    [boolean],
    "view"
  >;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  onInstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  onUninstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  removeGuardian: TypedContractMethod<
    [guardian: AddressLike],
    [void],
    "nonpayable"
  >;

  startRecovery: TypedContractMethod<
    [
      account: AddressLike,
      guardianSignatures: SocialRecoveryModule.GuardianSignatureStruct[],
      executionCalldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  updateThreshold: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTimelock: TypedContractMethod<
    [timelock: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addGuardian"
  ): TypedContractMethod<[guardian: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelRecovery()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelRecovery(address,(bytes,address)[])"
  ): TypedContractMethod<
    [
      account: AddressLike,
      guardianSignatures: SocialRecoveryModule.GuardianSignatureStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeRecovery"
  ): TypedContractMethod<
    [account: AddressLike, executionCalldata: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGuardians"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMaxGuardians"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecoveryStatus"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimelock"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isGuardian"
  ): TypedContractMethod<
    [account: AddressLike, guardian: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isModuleType"
  ): TypedContractMethod<[moduleTypeId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeGuardian"
  ): TypedContractMethod<[guardian: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startRecovery"
  ): TypedContractMethod<
    [
      account: AddressLike,
      guardianSignatures: SocialRecoveryModule.GuardianSignatureStruct[],
      executionCalldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateThreshold"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTimelock"
  ): TypedContractMethod<[timelock: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "GuardianAdded"
  ): TypedContractEvent<
    GuardianAddedEvent.InputTuple,
    GuardianAddedEvent.OutputTuple,
    GuardianAddedEvent.OutputObject
  >;
  getEvent(
    key: "GuardianRemoved"
  ): TypedContractEvent<
    GuardianRemovedEvent.InputTuple,
    GuardianRemovedEvent.OutputTuple,
    GuardianRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleInstalledReceived"
  ): TypedContractEvent<
    ModuleInstalledReceivedEvent.InputTuple,
    ModuleInstalledReceivedEvent.OutputTuple,
    ModuleInstalledReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUninstalledReceived"
  ): TypedContractEvent<
    ModuleUninstalledReceivedEvent.InputTuple,
    ModuleUninstalledReceivedEvent.OutputTuple,
    ModuleUninstalledReceivedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryCancelled"
  ): TypedContractEvent<
    RecoveryCancelledEvent.InputTuple,
    RecoveryCancelledEvent.OutputTuple,
    RecoveryCancelledEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryExecuted"
  ): TypedContractEvent<
    RecoveryExecutedEvent.InputTuple,
    RecoveryExecutedEvent.OutputTuple,
    RecoveryExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryStarted"
  ): TypedContractEvent<
    RecoveryStartedEvent.InputTuple,
    RecoveryStartedEvent.OutputTuple,
    RecoveryStartedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdChanged"
  ): TypedContractEvent<
    ThresholdChangedEvent.InputTuple,
    ThresholdChangedEvent.OutputTuple,
    ThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: "TimelockChanged"
  ): TypedContractEvent<
    TimelockChangedEvent.InputTuple,
    TimelockChangedEvent.OutputTuple,
    TimelockChangedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "GuardianAdded(address,address)": TypedContractEvent<
      GuardianAddedEvent.InputTuple,
      GuardianAddedEvent.OutputTuple,
      GuardianAddedEvent.OutputObject
    >;
    GuardianAdded: TypedContractEvent<
      GuardianAddedEvent.InputTuple,
      GuardianAddedEvent.OutputTuple,
      GuardianAddedEvent.OutputObject
    >;

    "GuardianRemoved(address,address)": TypedContractEvent<
      GuardianRemovedEvent.InputTuple,
      GuardianRemovedEvent.OutputTuple,
      GuardianRemovedEvent.OutputObject
    >;
    GuardianRemoved: TypedContractEvent<
      GuardianRemovedEvent.InputTuple,
      GuardianRemovedEvent.OutputTuple,
      GuardianRemovedEvent.OutputObject
    >;

    "ModuleInstalledReceived(address,bytes)": TypedContractEvent<
      ModuleInstalledReceivedEvent.InputTuple,
      ModuleInstalledReceivedEvent.OutputTuple,
      ModuleInstalledReceivedEvent.OutputObject
    >;
    ModuleInstalledReceived: TypedContractEvent<
      ModuleInstalledReceivedEvent.InputTuple,
      ModuleInstalledReceivedEvent.OutputTuple,
      ModuleInstalledReceivedEvent.OutputObject
    >;

    "ModuleUninstalledReceived(address,bytes)": TypedContractEvent<
      ModuleUninstalledReceivedEvent.InputTuple,
      ModuleUninstalledReceivedEvent.OutputTuple,
      ModuleUninstalledReceivedEvent.OutputObject
    >;
    ModuleUninstalledReceived: TypedContractEvent<
      ModuleUninstalledReceivedEvent.InputTuple,
      ModuleUninstalledReceivedEvent.OutputTuple,
      ModuleUninstalledReceivedEvent.OutputObject
    >;

    "RecoveryCancelled(address)": TypedContractEvent<
      RecoveryCancelledEvent.InputTuple,
      RecoveryCancelledEvent.OutputTuple,
      RecoveryCancelledEvent.OutputObject
    >;
    RecoveryCancelled: TypedContractEvent<
      RecoveryCancelledEvent.InputTuple,
      RecoveryCancelledEvent.OutputTuple,
      RecoveryCancelledEvent.OutputObject
    >;

    "RecoveryExecuted(address)": TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;
    RecoveryExecuted: TypedContractEvent<
      RecoveryExecutedEvent.InputTuple,
      RecoveryExecutedEvent.OutputTuple,
      RecoveryExecutedEvent.OutputObject
    >;

    "RecoveryStarted(address)": TypedContractEvent<
      RecoveryStartedEvent.InputTuple,
      RecoveryStartedEvent.OutputTuple,
      RecoveryStartedEvent.OutputObject
    >;
    RecoveryStarted: TypedContractEvent<
      RecoveryStartedEvent.InputTuple,
      RecoveryStartedEvent.OutputTuple,
      RecoveryStartedEvent.OutputObject
    >;

    "ThresholdChanged(address,uint256)": TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;
    ThresholdChanged: TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;

    "TimelockChanged(address,uint256)": TypedContractEvent<
      TimelockChangedEvent.InputTuple,
      TimelockChangedEvent.OutputTuple,
      TimelockChangedEvent.OutputObject
    >;
    TimelockChanged: TypedContractEvent<
      TimelockChangedEvent.InputTuple,
      TimelockChangedEvent.OutputTuple,
      TimelockChangedEvent.OutputObject
    >;
  };
}
