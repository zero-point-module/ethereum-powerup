/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ERC7579HookMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "isModuleType"
      | "onInstall"
      | "onUninstall"
      | "postCheck"
      | "preCheck"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ModuleInstalledReceived"
      | "ModuleUninstalledReceived"
      | "PostCheck"
      | "PreCheck"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "isModuleType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postCheck",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preCheck",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "isModuleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postCheck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preCheck", data: BytesLike): Result;
}

export namespace ModuleInstalledReceivedEvent {
  export type InputTuple = [account: AddressLike, data: BytesLike];
  export type OutputTuple = [account: string, data: string];
  export interface OutputObject {
    account: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUninstalledReceivedEvent {
  export type InputTuple = [account: AddressLike, data: BytesLike];
  export type OutputTuple = [account: string, data: string];
  export interface OutputObject {
    account: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostCheckEvent {
  export type InputTuple = [hookData: BytesLike];
  export type OutputTuple = [hookData: string];
  export interface OutputObject {
    hookData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreCheckEvent {
  export type InputTuple = [
    sender: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [sender: string, value: bigint, data: string];
  export interface OutputObject {
    sender: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC7579HookMock extends BaseContract {
  connect(runner?: ContractRunner | null): ERC7579HookMock;
  waitForDeployment(): Promise<this>;

  interface: ERC7579HookMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isModuleType: TypedContractMethod<
    [moduleTypeId: BigNumberish],
    [boolean],
    "view"
  >;

  onInstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  onUninstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  postCheck: TypedContractMethod<[hookData: BytesLike], [void], "nonpayable">;

  preCheck: TypedContractMethod<
    [msgSender: AddressLike, value: BigNumberish, msgData: BytesLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isModuleType"
  ): TypedContractMethod<[moduleTypeId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "postCheck"
  ): TypedContractMethod<[hookData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "preCheck"
  ): TypedContractMethod<
    [msgSender: AddressLike, value: BigNumberish, msgData: BytesLike],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "ModuleInstalledReceived"
  ): TypedContractEvent<
    ModuleInstalledReceivedEvent.InputTuple,
    ModuleInstalledReceivedEvent.OutputTuple,
    ModuleInstalledReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUninstalledReceived"
  ): TypedContractEvent<
    ModuleUninstalledReceivedEvent.InputTuple,
    ModuleUninstalledReceivedEvent.OutputTuple,
    ModuleUninstalledReceivedEvent.OutputObject
  >;
  getEvent(
    key: "PostCheck"
  ): TypedContractEvent<
    PostCheckEvent.InputTuple,
    PostCheckEvent.OutputTuple,
    PostCheckEvent.OutputObject
  >;
  getEvent(
    key: "PreCheck"
  ): TypedContractEvent<
    PreCheckEvent.InputTuple,
    PreCheckEvent.OutputTuple,
    PreCheckEvent.OutputObject
  >;

  filters: {
    "ModuleInstalledReceived(address,bytes)": TypedContractEvent<
      ModuleInstalledReceivedEvent.InputTuple,
      ModuleInstalledReceivedEvent.OutputTuple,
      ModuleInstalledReceivedEvent.OutputObject
    >;
    ModuleInstalledReceived: TypedContractEvent<
      ModuleInstalledReceivedEvent.InputTuple,
      ModuleInstalledReceivedEvent.OutputTuple,
      ModuleInstalledReceivedEvent.OutputObject
    >;

    "ModuleUninstalledReceived(address,bytes)": TypedContractEvent<
      ModuleUninstalledReceivedEvent.InputTuple,
      ModuleUninstalledReceivedEvent.OutputTuple,
      ModuleUninstalledReceivedEvent.OutputObject
    >;
    ModuleUninstalledReceived: TypedContractEvent<
      ModuleUninstalledReceivedEvent.InputTuple,
      ModuleUninstalledReceivedEvent.OutputTuple,
      ModuleUninstalledReceivedEvent.OutputObject
    >;

    "PostCheck(bytes)": TypedContractEvent<
      PostCheckEvent.InputTuple,
      PostCheckEvent.OutputTuple,
      PostCheckEvent.OutputObject
    >;
    PostCheck: TypedContractEvent<
      PostCheckEvent.InputTuple,
      PostCheckEvent.OutputTuple,
      PostCheckEvent.OutputObject
    >;

    "PreCheck(address,uint256,bytes)": TypedContractEvent<
      PreCheckEvent.InputTuple,
      PreCheckEvent.OutputTuple,
      PreCheckEvent.OutputObject
    >;
    PreCheck: TypedContractEvent<
      PreCheckEvent.InputTuple,
      PreCheckEvent.OutputTuple,
      PreCheckEvent.OutputObject
    >;
  };
}
