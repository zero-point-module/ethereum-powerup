/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Packing,
  PackingInterface,
} from "../../../../@openzeppelin/contracts/utils/Packing";

const _abi = [
  {
    inputs: [],
    name: "OutOfRangeAccess",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220cbb63d6b728a95d0cf93f67e2ddc0a915b9c85c9da7c659af870aca9afadce0464736f6c634300081c0033";

type PackingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PackingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Packing__factory extends ContractFactory {
  constructor(...args: PackingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Packing & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Packing__factory {
    return super.connect(runner) as Packing__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PackingInterface {
    return new Interface(_abi) as PackingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Packing {
    return new Contract(address, _abi, runner) as unknown as Packing;
  }
}
