/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IERC7579Execution,
  IERC7579ExecutionInterface,
} from "../../../../../@openzeppelin/contracts/interfaces/draft-IERC7579.sol/IERC7579Execution";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "mode",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "executionCalldata",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "mode",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "executionCalldata",
        type: "bytes",
      },
    ],
    name: "executeFromExecutor",
    outputs: [
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IERC7579Execution__factory {
  static readonly abi = _abi;
  static createInterface(): IERC7579ExecutionInterface {
    return new Interface(_abi) as IERC7579ExecutionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IERC7579Execution {
    return new Contract(address, _abi, runner) as unknown as IERC7579Execution;
  }
}
