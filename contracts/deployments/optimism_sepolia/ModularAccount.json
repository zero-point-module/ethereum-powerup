{
  "address": "0x3E3E97AC0436F3e20E921b2DE5Cb954A3Dd18828",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AccountUnauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ERC7579AlreadyInstalledModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC7579DecodingError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ERC7579MismatchedModuleTypeId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "ERC7579MissingFallbackHandler",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ERC7579UninstalledModule",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "CallType",
          "name": "callType",
          "type": "bytes1"
        }
      ],
      "name": "ERC7579UnsupportedCallType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "ExecType",
          "name": "execType",
          "type": "bytes1"
        }
      ],
      "name": "ERC7579UnsupportedExecType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        }
      ],
      "name": "ERC7579UnsupportedModuleType",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfRangeAccess",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "batchExecutionIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returndata",
          "type": "bytes"
        }
      ],
      "name": "ERC7579TryExecuteFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleInstalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ModuleUninstalled",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "accountId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "mode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "executionCalldata",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "mode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "executionCalldata",
          "type": "bytes"
        }
      ],
      "name": "executeFromExecutor",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint192",
          "name": "key",
          "type": "uint192"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        }
      ],
      "name": "installModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "additionalContext",
          "type": "bytes"
        }
      ],
      "name": "isModuleInstalled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encodedMode",
          "type": "bytes32"
        }
      ],
      "name": "supportsExecutionMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        }
      ],
      "name": "supportsModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "moduleTypeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "module",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "deInitData",
          "type": "bytes"
        }
      ],
      "name": "uninstallModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "accountGasLimits",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "gasFees",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct PackedUserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "missingAccountFunds",
          "type": "uint256"
        }
      ],
      "name": "validateUserOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x42397ada85df5dc6be38dd52e6f4dbfbaf3903d2ef0d77072e7588ae3584098f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xc9afeD86f54c8CB35e8AC8B4aB6e197010178470",
    "contractAddress": null,
    "transactionIndex": 17,
    "gasUsed": "2678115",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1f7a0b1423db2ec9804b600b04337599fe1e1585bbea64adf818c811284ddda5",
    "transactionHash": "0x42397ada85df5dc6be38dd52e6f4dbfbaf3903d2ef0d77072e7588ae3584098f",
    "logs": [],
    "blockNumber": 25460753,
    "cumulativeGasUsed": "10314747",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8a0a369fcadd648e98e006ce32d8a8df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AccountUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ERC7579AlreadyInstalledModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC7579DecodingError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ERC7579MismatchedModuleTypeId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"ERC7579MissingFallbackHandler\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ERC7579UninstalledModule\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"CallType\",\"name\":\"callType\",\"type\":\"bytes1\"}],\"name\":\"ERC7579UnsupportedCallType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"ExecType\",\"name\":\"execType\",\"type\":\"bytes1\"}],\"name\":\"ERC7579UnsupportedExecType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"}],\"name\":\"ERC7579UnsupportedModuleType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfRangeAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"batchExecutionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returndata\",\"type\":\"bytes\"}],\"name\":\"ERC7579TryExecuteFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleInstalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleUninstalled\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"accountId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"mode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"executionCalldata\",\"type\":\"bytes\"}],\"name\":\"executeFromExecutor\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"installModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalContext\",\"type\":\"bytes\"}],\"name\":\"isModuleInstalled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encodedMode\",\"type\":\"bytes32\"}],\"name\":\"supportsExecutionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"}],\"name\":\"supportsModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moduleTypeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"deInitData\",\"type\":\"bytes\"}],\"name\":\"uninstallModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AccountUnauthorized(address)\":[{\"details\":\"Unauthorized call to the account.\"}],\"ERC7579AlreadyInstalledModule(uint256,address)\":[{\"details\":\"The module is already installed.\"}],\"ERC7579DecodingError()\":[{\"details\":\"Input calldata not properly formatted and possibly malicious.\"}],\"ERC7579MismatchedModuleTypeId(uint256,address)\":[{\"details\":\"The provided module doesn't match the provided module type.\"}],\"ERC7579MissingFallbackHandler(bytes4)\":[{\"details\":\"The account's {fallback} was called with a selector that doesn't have an installed handler.\"}],\"ERC7579UninstalledModule(uint256,address)\":[{\"details\":\"The module is not installed.\"}],\"ERC7579UnsupportedCallType(bytes1)\":[{\"details\":\"The provided {CallType} is not supported.\"}],\"ERC7579UnsupportedExecType(bytes1)\":[{\"details\":\"The provided {ExecType} is not supported.\"}],\"ERC7579UnsupportedModuleType(uint256)\":[{\"details\":\"The module type is not supported.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"ERC7579TryExecuteFail(uint256,bytes)\":{\"details\":\"Emits when an {EXECTYPE_TRY} execution fails.\",\"params\":{\"batchExecutionIndex\":\"The index of the failed call in the execution batch.\",\"returndata\":\"The returned data from the failed call.\"}}},\"kind\":\"dev\",\"methods\":{\"accountId()\":{\"details\":\"Returns the account id of the smart account\",\"returns\":{\"_0\":\"the account id of the smart account MUST return a non-empty string The accountId SHOULD be structured like so:        \\\"vendorname.accountname.semver\\\" The id SHOULD be unique across all smart accounts\"}},\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"},\"entryPoint()\":{\"details\":\"Canonical entry point for the account that forwards and validates user operations.\"},\"execute(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.\",\"params\":{\"executionCalldata\":\"The encoded execution call data MUST ensure adequate authorization control: e.g. onlyEntryPointOrSelf if used with ERC-4337 If a mode is requested that is not supported by the Account, it MUST revert\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"}},\"executeFromExecutor(bytes32,bytes)\":{\"details\":\"Executes a transaction on behalf of the account.         This function is intended to be called by Executor Modules\",\"params\":{\"executionCalldata\":\"The encoded execution call data\",\"mode\":\"The encoded execution mode of the transaction. See ModeLib.sol for details\"},\"returns\":{\"returnData\":\"An array with the returned data of each executed subcall MUST ensure adequate authorization control: i.e. onlyExecutorModule If a mode is requested that is not supported by the Account, it MUST revert\"}},\"getNonce()\":{\"details\":\"Return the account nonce for the canonical sequence.\"},\"getNonce(uint192)\":{\"details\":\"Return the account nonce for a given sequence (key).\"},\"installModule(uint256,address,bytes)\":{\"details\":\"Installs a Module of a certain type on the smart account\",\"params\":{\"initData\":\"arbitrary data that may be required on the module during `onInstall` initialization. MUST implement authorization control MUST call `onInstall` on the module with the `initData` parameter if provided MUST emit ModuleInstalled event MUST revert if the module is already installed or the initialization on the module failed\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according to the ERC-7579 spec\"}},\"isModuleInstalled(uint256,address,bytes)\":{\"details\":\"Returns whether a module is installed on the smart account\",\"params\":{\"additionalContext\":\"arbitrary data that may be required to determine if the module is installed MUST return true if the module is installed and false otherwise\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according the ERC-7579 spec\"}},\"isValidSignature(bytes32,bytes)\":{\"details\":\"Resolve implementation of ERC-1271 by both ERC7739 and AccountERC7579 to support both schemes.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsExecutionMode(bytes32)\":{\"details\":\"Supported call types: * Single (`0x00`): A single transaction execution. * Batch (`0x01`): A batch of transactions execution. * Delegate (`0xff`): A delegate call execution. Supported exec types: * Default (`0x00`): Default execution type (revert on failure). * Try (`0x01`): Try execution type (emits ERC7579TryExecuteFail on failure).\",\"params\":{\"encodedMode\":\"the encoded mode MUST return true if the account supports the mode and false otherwise\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"supportsModule(uint256)\":{\"details\":\"Supported module types: * Validator: A module used during the validation phase to determine if a transaction is valid and should be executed on the account. * Executor: A module that can execute transactions on behalf of the smart account via a callback. * Fallback Handler: A module that can extend the fallback functionality of a smart account.\",\"params\":{\"moduleTypeId\":\"the module type ID according to the ERC-7579 spec MUST return true if the account supports the module type and false otherwise\"}},\"uninstallModule(uint256,address,bytes)\":{\"details\":\"Uninstalls a Module of a certain type on the smart account\",\"params\":{\"deInitData\":\"arbitrary data that may be required on the module during `onInstall` initialization. MUST implement authorization control MUST call `onUninstall` on the module with the `deInitData` parameter if provided MUST emit ModuleUninstalled event MUST revert if the module is not installed or the deInitialization on the module failed\",\"module\":\"the module address\",\"moduleTypeId\":\"the module type ID according the ERC-7579 spec\"}},\"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)\":{\"details\":\"Validates a user operation. * MUST validate the caller is a trusted EntryPoint * MUST validate that the signature is a valid signature of the userOpHash, and SHOULD   return SIG_VALIDATION_FAILED (and not revert) on signature mismatch. Any other error MUST revert. * MUST pay the entryPoint (caller) at least the \\u201cmissingAccountFunds\\u201d (which might   be zero, in case the current account\\u2019s deposit is high enough) Returns an encoded packed validation data that is composed of the following elements: - `authorizer` (`address`): 0 for success, 1 for failure, otherwise the address of an authorizer contract - `validUntil` (`uint48`): The UserOp is valid only up to this time. Zero for \\u201cinfinite\\u201d. - `validAfter` (`uint48`): The UserOp is valid only after this time.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ModularAccount.sol\":\"ModularAccount\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/community-contracts/contracts/account/Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {PackedUserOperation} from \\\"@openzeppelin/contracts/interfaces/draft-IERC4337.sol\\\";\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {ERC7739} from \\\"../utils/cryptography/ERC7739.sol\\\";\\nimport {AccountCore} from \\\"./AccountCore.sol\\\";\\n\\n/**\\n * @dev Extension of {AccountCore} with recommended feature that most account abstraction implementation will want:\\n *\\n * * {ERC721Holder} and {ERC1155Holder} to accept ERC-712 and ERC-1155 token transfers transfers.\\n * * {ERC7739} for ERC-1271 signature support with ERC-7739 replay protection\\n * * {ERC7821} for performing external calls in batches.\\n *\\n * TIP: Use {ERC7821} to enable external calls in batches.\\n *\\n * NOTE: To use this contract, the {ERC7739-_rawSignatureValidation} function must be\\n * implemented using a specific signature verification algorithm. See {SignerECDSA}, {SignerP256} or {SignerRSA}.\\n */\\nabstract contract Account is AccountCore, ERC721Holder, ERC1155Holder, ERC7739 {\\n    bytes32 private constant PACKED_USER_OPERATION =\\n        keccak256(\\n            \\\"PackedUserOperation(address sender,uint256 nonce,bytes initCode,bytes callData,bytes32 accountGasLimits,uint256 preVerificationGas,bytes32 gasFees,bytes paymasterAndData)\\\"\\n        );\\n\\n    /**\\n     * @dev Specialization of {AccountCore-_signableUserOpHash} that returns a typehash following EIP-712 typed data\\n     * hashing for readability. This assumes the underlying signature scheme implements `signTypedData`, which will be\\n     * the case when combined with {SignerECDSA} or {SignerERC7702}.\\n     */\\n    function _signableUserOpHash(\\n        PackedUserOperation calldata userOp,\\n        bytes32 /*userOpHash*/\\n    ) internal view virtual override returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        PACKED_USER_OPERATION,\\n                        userOp.sender,\\n                        userOp.nonce,\\n                        keccak256(userOp.initCode),\\n                        keccak256(userOp.callData),\\n                        userOp.accountGasLimits,\\n                        userOp.preVerificationGas,\\n                        userOp.gasFees,\\n                        keccak256(userOp.paymasterAndData)\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x843c18c5e93e48459968f29d395110482dabf36a5d05700c535562e8194654be\",\"license\":\"MIT\"},\"@openzeppelin/community-contracts/contracts/account/AccountCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {PackedUserOperation, IAccount, IEntryPoint} from \\\"@openzeppelin/contracts/interfaces/draft-IERC4337.sol\\\";\\nimport {ERC4337Utils} from \\\"@openzeppelin/contracts/account/utils/draft-ERC4337Utils.sol\\\";\\nimport {AbstractSigner} from \\\"../utils/cryptography/AbstractSigner.sol\\\";\\n\\n/**\\n * @dev A simple ERC4337 account implementation. This base implementation only includes the minimal logic to process\\n * user operations.\\n *\\n * Developers must implement the {AccountCore-_signableUserOpHash} and {AbstractSigner-_rawSignatureValidation}\\n * functions to define the account's validation logic.\\n *\\n * NOTE: This core account doesn't include any mechanism for performing arbitrary external calls. This is an essential\\n * feature that all Account should have. We leave it up to the developers to implement the mechanism of their choice.\\n * Common choices include ERC-6900, ERC-7579 and ERC-7821 (among others).\\n *\\n * IMPORTANT: Implementing a mechanism to validate signatures is a security-sensitive operation as it may allow an\\n * attacker to bypass the account's security measures. Check out {SignerECDSA}, {SignerP256}, or {SignerRSA} for\\n * digital signature validation implementations.\\n */\\nabstract contract AccountCore is AbstractSigner, IAccount {\\n    /**\\n     * @dev Unauthorized call to the account.\\n     */\\n    error AccountUnauthorized(address sender);\\n\\n    /**\\n     * @dev Revert if the caller is not the entry point or the account itself.\\n     */\\n    modifier onlyEntryPointOrSelf() {\\n        _checkEntryPointOrSelf();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Revert if the caller is not the entry point.\\n     */\\n    modifier onlyEntryPoint() {\\n        _checkEntryPoint();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Canonical entry point for the account that forwards and validates user operations.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint) {\\n        return ERC4337Utils.ENTRYPOINT_V07;\\n    }\\n\\n    /**\\n     * @dev Return the account nonce for the canonical sequence.\\n     */\\n    function getNonce() public view virtual returns (uint256) {\\n        return getNonce(0);\\n    }\\n\\n    /**\\n     * @dev Return the account nonce for a given sequence (key).\\n     */\\n    function getNonce(uint192 key) public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), key);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccount\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) public virtual onlyEntryPoint returns (uint256) {\\n        uint256 validationData = _validateUserOp(userOp, userOpHash);\\n        _payPrefund(missingAccountFunds);\\n        return validationData;\\n    }\\n\\n    /**\\n     * @dev Returns the validationData for a given user operation. By default, this checks the signature of the\\n     * signable hash (produced by {_signableUserOpHash}) using the abstract signer ({_rawSignatureValidation}).\\n     *\\n     * NOTE: The userOpHash is assumed to be correct. Calling this function with a userOpHash that does not match the\\n     * userOp will result in undefined behavior.\\n     */\\n    function _validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal virtual returns (uint256) {\\n        return\\n            _rawSignatureValidation(_signableUserOpHash(userOp, userOpHash), userOp.signature)\\n                ? ERC4337Utils.SIG_VALIDATION_SUCCESS\\n                : ERC4337Utils.SIG_VALIDATION_FAILED;\\n    }\\n\\n    /**\\n     * @dev Virtual function that returns the signable hash for a user operations. Some implementation may return\\n     * `userOpHash` while other may prefer a signer-friendly value such as an EIP-712 hash describing the `userOp`\\n     * details.\\n     */\\n    function _signableUserOpHash(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal view virtual returns (bytes32);\\n\\n    /**\\n     * @dev Sends the missing funds for executing the user operation to the {entrypoint}.\\n     * The `missingAccountFunds` must be defined by the entrypoint when calling {validateUserOp}.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds > 0) {\\n            (bool success, ) = payable(msg.sender).call{value: missingAccountFunds}(\\\"\\\");\\n            success; // Silence warning. The entrypoint should validate the result.\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensures the caller is the {entrypoint}.\\n     */\\n    function _checkEntryPoint() internal view virtual {\\n        address sender = msg.sender;\\n        if (sender != address(entryPoint())) {\\n            revert AccountUnauthorized(sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Ensures the caller is the {entrypoint} or the account itself.\\n     */\\n    function _checkEntryPointOrSelf() internal view virtual {\\n        address sender = msg.sender;\\n        if (sender != address(this) && sender != address(entryPoint())) {\\n            revert AccountUnauthorized(sender);\\n        }\\n    }\\n\\n    /**\\n     * @dev Receive Ether.\\n     */\\n    receive() external payable virtual {}\\n}\\n\",\"keccak256\":\"0x3bbacc79bb4d2c23b2d5698549758ee0e3c267807a66ce35045da0d395c897c8\",\"license\":\"MIT\"},\"@openzeppelin/community-contracts/contracts/account/extensions/AccountERC7579.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.24;\\n\\nimport {PackedUserOperation} from \\\"@openzeppelin/contracts/interfaces/draft-IERC4337.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {IERC7579Module, IERC7579Validator, IERC7579Execution, IERC7579AccountConfig, IERC7579ModuleConfig, MODULE_TYPE_VALIDATOR, MODULE_TYPE_EXECUTOR, MODULE_TYPE_FALLBACK} from \\\"@openzeppelin/contracts/interfaces/draft-IERC7579.sol\\\";\\nimport {ERC7579Utils, Mode, CallType, ExecType} from \\\"@openzeppelin/contracts/account/utils/draft-ERC7579Utils.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Bytes} from \\\"@openzeppelin/contracts/utils/Bytes.sol\\\";\\nimport {Packing} from \\\"@openzeppelin/contracts/utils/Packing.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Calldata} from \\\"@openzeppelin/contracts/utils/Calldata.sol\\\";\\nimport {AccountCore} from \\\"../AccountCore.sol\\\";\\n\\n/**\\n * @dev Extension of {AccountCore} that implements support for ERC-7579 modules.\\n *\\n * To comply with the ERC-1271 support requirement, this contract implements {ERC7739} as an\\n * opinionated layer to avoid signature replayability across accounts controlled by the same key.\\n *\\n * This contract does not implement validation logic for user operations since these functionality\\n * is often delegated to self-contained validation modules. Developers must install a validator module\\n * upon initialization (or any other mechanism to enable execution from the account):\\n *\\n * ```solidity\\n * contract MyAccountERC7579 is AccountERC7579, Initializable {\\n *     constructor() EIP712(\\\"MyAccountRSA\\\", \\\"1\\\") {}\\n *\\n *   function initializeAccount(address validator, bytes calldata validatorData) public initializer {\\n *     _installModule(MODULE_TYPE_VALIDATOR, validator, validatorData);\\n *   }\\n * }\\n * ```\\n *\\n * NOTE:\\n * * Hook support is not included. See {AccountERC7579Hooked} for a version that hooks to execution.\\n * * Validator selection, when verifying either ERC-1271 signature or ERC-4337 UserOperation is implemented in\\n *   internal virtual functions {_extractUserOpValidator} and {_extractSignatureValidator}. Both are implemented\\n *   following common practices. However, this part is not standardized in ERC-7579 (or in any follow-up ERC). Some\\n *   accounts may want to override these internal functions.\\n */\\nabstract contract AccountERC7579 is\\n    AccountCore,\\n    IERC1271,\\n    IERC7579Execution,\\n    IERC7579AccountConfig,\\n    IERC7579ModuleConfig\\n{\\n    using Bytes for *;\\n    using ERC7579Utils for *;\\n    using EnumerableSet for *;\\n    using Packing for bytes32;\\n\\n    EnumerableSet.AddressSet private _validators;\\n    EnumerableSet.AddressSet private _executors;\\n    mapping(bytes4 selector => address) private _fallbacks;\\n\\n    /// @dev The account's {fallback} was called with a selector that doesn't have an installed handler.\\n    error ERC7579MissingFallbackHandler(bytes4 selector);\\n\\n    /// @dev Modifier that checks if the caller is an installed module of the given type.\\n    modifier onlyModule(uint256 moduleTypeId, bytes calldata additionalContext) {\\n        _checkModule(moduleTypeId, msg.sender, additionalContext);\\n        _;\\n    }\\n\\n    /// @dev See {_fallback}.\\n    fallback(bytes calldata) external payable virtual returns (bytes memory) {\\n        return _fallback();\\n    }\\n\\n    /// @inheritdoc IERC7579AccountConfig\\n    function accountId() public view virtual returns (string memory) {\\n        // vendorname.accountname.semver\\n        return \\\"@openzeppelin/community-contracts.AccountERC7579.v0.0.0\\\";\\n    }\\n\\n    /**\\n     * @inheritdoc IERC7579AccountConfig\\n     *\\n     * @dev Supported call types:\\n     * * Single (`0x00`): A single transaction execution.\\n     * * Batch (`0x01`): A batch of transactions execution.\\n     * * Delegate (`0xff`): A delegate call execution.\\n     *\\n     * Supported exec types:\\n     * * Default (`0x00`): Default execution type (revert on failure).\\n     * * Try (`0x01`): Try execution type (emits ERC7579TryExecuteFail on failure).\\n     */\\n    function supportsExecutionMode(bytes32 encodedMode) public view virtual returns (bool) {\\n        (CallType callType, ExecType execType, , ) = Mode.wrap(encodedMode).decodeMode();\\n        return\\n            (callType == ERC7579Utils.CALLTYPE_SINGLE ||\\n                callType == ERC7579Utils.CALLTYPE_BATCH ||\\n                callType == ERC7579Utils.CALLTYPE_DELEGATECALL) &&\\n            (execType == ERC7579Utils.EXECTYPE_DEFAULT || execType == ERC7579Utils.EXECTYPE_TRY);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC7579AccountConfig\\n     *\\n     * @dev Supported module types:\\n     *\\n     * * Validator: A module used during the validation phase to determine if a transaction is valid and\\n     * should be executed on the account.\\n     * * Executor: A module that can execute transactions on behalf of the smart account via a callback.\\n     * * Fallback Handler: A module that can extend the fallback functionality of a smart account.\\n     */\\n    function supportsModule(uint256 moduleTypeId) public view virtual returns (bool) {\\n        return\\n            moduleTypeId == MODULE_TYPE_VALIDATOR ||\\n            moduleTypeId == MODULE_TYPE_EXECUTOR ||\\n            moduleTypeId == MODULE_TYPE_FALLBACK;\\n    }\\n\\n    /// @inheritdoc IERC7579ModuleConfig\\n    function installModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata initData\\n    ) public virtual onlyEntryPointOrSelf {\\n        _installModule(moduleTypeId, module, initData);\\n    }\\n\\n    /// @inheritdoc IERC7579ModuleConfig\\n    function uninstallModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata deInitData\\n    ) public virtual onlyEntryPointOrSelf {\\n        _uninstallModule(moduleTypeId, module, deInitData);\\n    }\\n\\n    /// @inheritdoc IERC7579ModuleConfig\\n    function isModuleInstalled(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata additionalContext\\n    ) public view virtual returns (bool) {\\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) return _validators.contains(module);\\n        if (moduleTypeId == MODULE_TYPE_EXECUTOR) return _executors.contains(module);\\n        if (moduleTypeId == MODULE_TYPE_FALLBACK) return _fallbacks[bytes4(additionalContext[0:4])] == module;\\n        return false;\\n    }\\n\\n    /// @inheritdoc IERC7579Execution\\n    function execute(bytes32 mode, bytes calldata executionCalldata) public payable virtual onlyEntryPointOrSelf {\\n        _execute(Mode.wrap(mode), executionCalldata);\\n    }\\n\\n    /// @inheritdoc IERC7579Execution\\n    function executeFromExecutor(\\n        bytes32 mode,\\n        bytes calldata executionCalldata\\n    )\\n        public\\n        payable\\n        virtual\\n        onlyModule(MODULE_TYPE_EXECUTOR, Calldata.emptyBytes())\\n        returns (bytes[] memory returnData)\\n    {\\n        return _execute(Mode.wrap(mode), executionCalldata);\\n    }\\n\\n    /**\\n     * @dev Implement ERC-1271 through IERC7579Validator modules. If module based validation fails, fallback to\\n     * \\\"native\\\" validation by the abstract signer.\\n     *\\n     * NOTE: when combined with {ERC7739} (for example through {Account}), resolution ordering may have an impact\\n     * ({ERC7739} does not call super). Manual resolution might be necessary.\\n     */\\n    function isValidSignature(bytes32 hash, bytes calldata signature) public view virtual override returns (bytes4) {\\n        // check signature length is enough for extraction\\n        if (signature.length >= 20) {\\n            (address module, bytes calldata innerSignature) = _extractSignatureValidator(signature);\\n            // if module is not installed, skip\\n            if (isModuleInstalled(MODULE_TYPE_VALIDATOR, module, Calldata.emptyBytes())) {\\n                // try validation, skip any revert\\n                try IERC7579Validator(module).isValidSignatureWithSender(address(this), hash, innerSignature) returns (\\n                    bytes4 magic\\n                ) {\\n                    if (magic == IERC1271.isValidSignature.selector) return magic;\\n                } catch {}\\n            }\\n        }\\n        return bytes4(0xffffffff);\\n    }\\n\\n    /**\\n     * @dev Validates a user operation with {_signableUserOpHash} and returns the validation data\\n     * if the module specified by the first 20 bytes of the nonce key is installed. Falls back to\\n     * {AccountCore-_validateUserOp} otherwise.\\n     *\\n     * See {_extractUserOpValidator} for the module extraction logic.\\n     */\\n    function _validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal virtual override returns (uint256) {\\n        address module = _extractUserOpValidator(userOp);\\n        return\\n            isModuleInstalled(MODULE_TYPE_VALIDATOR, module, Calldata.emptyBytes())\\n                ? IERC7579Validator(module).validateUserOp(userOp, _signableUserOpHash(userOp, userOpHash))\\n                : super._validateUserOp(userOp, userOpHash);\\n    }\\n\\n    /**\\n     * @dev ERC-7579 execution logic. See {supportsExecutionMode} for supported modes.\\n     *\\n     * Reverts if the call type is not supported.\\n     */\\n    function _execute(\\n        Mode mode,\\n        bytes calldata executionCalldata\\n    ) internal virtual returns (bytes[] memory returnData) {\\n        (CallType callType, ExecType execType, , ) = mode.decodeMode();\\n        if (callType == ERC7579Utils.CALLTYPE_SINGLE) return executionCalldata.execSingle(execType);\\n        if (callType == ERC7579Utils.CALLTYPE_BATCH) return executionCalldata.execBatch(execType);\\n        if (callType == ERC7579Utils.CALLTYPE_DELEGATECALL) return executionCalldata.execDelegateCall(execType);\\n        revert ERC7579Utils.ERC7579UnsupportedCallType(callType);\\n    }\\n\\n    /**\\n     * @dev Installs a module of the given type with the given initialization data.\\n     *\\n     * For the fallback module type, the `initData` is expected to be a tuple of a 4-byte selector and the\\n     * rest of the data to be sent to the handler when calling {IERC7579Module-onInstall}.\\n     *\\n     * Requirements:\\n     *\\n     * * Module type must be supported. See {supportsModule}. Reverts with {ERC7579UnsupportedModuleType}.\\n     * * Module must be of the given type. Reverts with {ERC7579MismatchedModuleTypeId}.\\n     * * Module must not be already installed. Reverts with {ERC7579AlreadyInstalledModule}.\\n     *\\n     * Emits a {ModuleInstalled} event.\\n     */\\n    function _installModule(uint256 moduleTypeId, address module, bytes memory initData) internal virtual {\\n        require(supportsModule(moduleTypeId), ERC7579Utils.ERC7579UnsupportedModuleType(moduleTypeId));\\n        require(\\n            IERC7579Module(module).isModuleType(moduleTypeId),\\n            ERC7579Utils.ERC7579MismatchedModuleTypeId(moduleTypeId, module)\\n        );\\n\\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) {\\n            require(_validators.add(module), ERC7579Utils.ERC7579AlreadyInstalledModule(moduleTypeId, module));\\n        } else if (moduleTypeId == MODULE_TYPE_EXECUTOR) {\\n            require(_executors.add(module), ERC7579Utils.ERC7579AlreadyInstalledModule(moduleTypeId, module));\\n        } else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\\n            bytes4 selector;\\n            (selector, initData) = _decodeFallbackData(initData);\\n            require(\\n                _fallbacks[selector] == address(0),\\n                ERC7579Utils.ERC7579AlreadyInstalledModule(moduleTypeId, module)\\n            );\\n            _fallbacks[selector] = module;\\n        }\\n\\n        IERC7579Module(module).onInstall(initData);\\n        emit ModuleInstalled(moduleTypeId, module);\\n    }\\n\\n    /**\\n     * @dev Uninstalls a module of the given type with the given de-initialization data.\\n     *\\n     * For the fallback module type, the `deInitData` is expected to be a tuple of a 4-byte selector and the\\n     * rest of the data to be sent to the handler when calling {IERC7579Module-onUninstall}.\\n     *\\n     * Requirements:\\n     *\\n     * * Module must be already installed. Reverts with {ERC7579UninstalledModule} otherwise.\\n     */\\n    function _uninstallModule(uint256 moduleTypeId, address module, bytes memory deInitData) internal virtual {\\n        if (moduleTypeId == MODULE_TYPE_VALIDATOR) {\\n            require(_validators.remove(module), ERC7579Utils.ERC7579UninstalledModule(moduleTypeId, module));\\n        } else if (moduleTypeId == MODULE_TYPE_EXECUTOR) {\\n            require(_executors.remove(module), ERC7579Utils.ERC7579UninstalledModule(moduleTypeId, module));\\n        } else if (moduleTypeId == MODULE_TYPE_FALLBACK) {\\n            bytes4 selector;\\n            (selector, deInitData) = _decodeFallbackData(deInitData);\\n            require(\\n                _fallbackHandler(selector) == module && module != address(0),\\n                ERC7579Utils.ERC7579UninstalledModule(moduleTypeId, module)\\n            );\\n            delete _fallbacks[selector];\\n        }\\n\\n        IERC7579Module(module).onUninstall(deInitData);\\n        emit ModuleUninstalled(moduleTypeId, module);\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates the call to the installed handler for the given selector.\\n     *\\n     * Reverts with {ERC7579MissingFallbackHandler} if the handler is not installed.\\n     *\\n     * Calls the handler with the original `msg.sender` appended at the end of the calldata following\\n     * the ERC-2771 format.\\n     */\\n    function _fallback() internal virtual returns (bytes memory) {\\n        address handler = _fallbackHandler(msg.sig);\\n        require(handler != address(0), ERC7579MissingFallbackHandler(msg.sig));\\n\\n        // From https://eips.ethereum.org/EIPS/eip-7579#fallback[ERC-7579 specifications]:\\n        // - MUST utilize ERC-2771 to add the original msg.sender to the calldata sent to the fallback handler\\n        // - MUST use call to invoke the fallback handler\\n        (bool success, bytes memory returndata) = handler.call{value: msg.value}(\\n            abi.encodePacked(msg.data, msg.sender)\\n        );\\n\\n        if (success) return returndata;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            revert(add(returndata, 0x20), mload(returndata))\\n        }\\n    }\\n\\n    /// @dev Returns the fallback handler for the given selector. Returns `address(0)` if not installed.\\n    function _fallbackHandler(bytes4 selector) internal view virtual returns (address) {\\n        return _fallbacks[selector];\\n    }\\n\\n    /// @dev Checks if the module is installed. Reverts if the module is not installed.\\n    function _checkModule(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata additionalContext\\n    ) internal view virtual {\\n        require(\\n            isModuleInstalled(moduleTypeId, module, additionalContext),\\n            ERC7579Utils.ERC7579UninstalledModule(moduleTypeId, module)\\n        );\\n    }\\n\\n    /**\\n     * @dev Extracts the nonce validator from the user operation.\\n     *\\n     * To construct a nonce key, set nonce as follows:\\n     *\\n     * ```\\n     * <module address (20 bytes)> | <key (4 bytes)> | <nonce (8 bytes)>\\n     * ```\\n     * NOTE: The default behavior of this function replicated the behavior of\\n     * [Safe adapter](https://github.com/rhinestonewtf/safe7579/blob/bb29e8b1a66658790c4169e72608e27d220f79be/src/Safe7579.sol#L266) and\\n     * [Etherspot's Prime Account](https://github.com/etherspot/etherspot-prime-contracts/blob/cfcdb48c4172cea0d66038324c0bae3288aa8caa/src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol#L227).\\n     *\\n     * This is not standardized in ERC-7579 (or in any follow-up ERC). Some accounts may want to override these internal functions.\\n     *\\n     * For example, [Biconomy's Nexus](https://github.com/bcnmy/nexus/blob/54f4e19baaff96081a8843672977caf712ef19f4/contracts/lib/NonceLib.sol#L17)\\n     * uses a similar yet incompatible approach (the validator address is also part of the nonce, but not at the same location)\\n     */\\n    function _extractUserOpValidator(PackedUserOperation calldata userOp) internal pure virtual returns (address) {\\n        return address(bytes32(userOp.nonce).extract_32_20(0));\\n    }\\n\\n    /**\\n     * @dev Extracts the signature validator from the signature.\\n     *\\n     * To construct a signature, set the first 20 bytes as the module address and the remaining bytes as the\\n     * signature data:\\n     *\\n     * ```\\n     * <module address (20 bytes)> | <signature data>\\n     * ```\\n     *\\n     * NOTE: The default behavior of this function replicated the behavior of\\n     * [Safe adapter](https://github.com/rhinestonewtf/safe7579/blob/bb29e8b1a66658790c4169e72608e27d220f79be/src/Safe7579.sol#L350),\\n     * [Biconomy's Nexus](https://github.com/bcnmy/nexus/blob/54f4e19baaff96081a8843672977caf712ef19f4/contracts/Nexus.sol#L239) and\\n     * [Etherspot's Prime Account](https://github.com/etherspot/etherspot-prime-contracts/blob/cfcdb48c4172cea0d66038324c0bae3288aa8caa/src/modular-etherspot-wallet/wallet/ModularEtherspotWallet.sol#L252)\\n     *\\n     * This is not standardized in ERC-7579 (or in any follow-up ERC). Some accounts may want to override these internal functions.\\n     */\\n    function _extractSignatureValidator(\\n        bytes calldata signature\\n    ) internal pure virtual returns (address module, bytes calldata innerSignature) {\\n        return (address(bytes20(signature[0:20])), signature[20:]);\\n    }\\n\\n    /**\\n     * @dev Extract the function selector from initData/deInitData for MODULE_TYPE_FALLBACK\\n     *\\n     * NOTE: If we had calldata here, we would could use calldata slice which are cheaper to manipulate and don't\\n     * require actual copy. However, this would require `_installModule` to get a calldata bytes object instead of a\\n     * memory bytes object. This would prevent calling `_installModule` from a contract constructor and would force\\n     * the use of external initializers. That may change in the future, as most accounts will probably be deployed as\\n     * clones/proxy/ERC-7702 delegates and therefore rely on initializers anyway.\\n     */\\n    function _decodeFallbackData(\\n        bytes memory data\\n    ) internal pure virtual returns (bytes4 selector, bytes memory remaining) {\\n        return (bytes4(data), data.slice(4));\\n    }\\n\\n    /// @dev By default, only use the modules for validation of userOp and signature. Disable raw signatures.\\n    function _rawSignatureValidation(\\n        bytes32 /*hash*/,\\n        bytes calldata /*signature*/\\n    ) internal view virtual override returns (bool) {\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xd783593a88510a075e95057c0eda02d4c1e23b789a9758a2bc2f6bdcffc19bbe\",\"license\":\"MIT\"},\"@openzeppelin/community-contracts/contracts/utils/cryptography/AbstractSigner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Abstract contract for signature validation.\\n *\\n * Developers must implement {_rawSignatureValidation} and use it as the lowest-level signature validation mechanism.\\n */\\nabstract contract AbstractSigner {\\n    /**\\n     * @dev Signature validation algorithm.\\n     *\\n     * WARNING: Implementing a signature validation algorithm is a security-sensitive operation as it involves\\n     * cryptographic verification. It is important to review and test thoroughly before deployment. Consider\\n     * using one of the signature verification libraries (https://docs.openzeppelin.com/contracts/api/utils#ECDSA[ECDSA],\\n     * https://docs.openzeppelin.com/contracts/api/utils#P256[P256] or https://docs.openzeppelin.com/contracts/api/utils#RSA[RSA]).\\n     */\\n    function _rawSignatureValidation(bytes32 hash, bytes calldata signature) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xe12f0b1c9f1a243c6cadca1aa4e2c8cde7f8b7e032f4f3dcdfd58812cdf86f48\",\"license\":\"MIT\"},\"@openzeppelin/community-contracts/contracts/utils/cryptography/ERC7739.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {ShortStrings} from \\\"@openzeppelin/contracts/utils/ShortStrings.sol\\\";\\nimport {AbstractSigner} from \\\"./AbstractSigner.sol\\\";\\nimport {ERC7739Utils} from \\\"./ERC7739Utils.sol\\\";\\n\\n/**\\n * @dev Validates signatures wrapping the message hash in a nested EIP712 type. See {ERC7739Utils}.\\n *\\n * Linking the signature to the EIP-712 domain separator is a security measure to prevent signature replay across different\\n * EIP-712 domains (e.g. a single offchain owner of multiple contracts).\\n *\\n * This contract requires implementing the {_rawSignatureValidation} function, which passes the wrapped message hash,\\n * which may be either an typed data or a personal sign nested type.\\n *\\n * NOTE: https://docs.openzeppelin.com/contracts/api/utils#EIP712[EIP-712] uses\\n * https://docs.openzeppelin.com/contracts/api/utils#ShortStrings[ShortStrings] to optimize gas costs for\\n * short strings (up to 31 characters). Consider that strings longer than that will use storage, which\\n * may limit the ability of the signer to be used within the ERC-4337 validation phase (due to\\n * https://eips.ethereum.org/EIPS/eip-7562#storage-rules[ERC-7562 storage access rules]).\\n */\\nabstract contract ERC7739 is AbstractSigner, EIP712, IERC1271 {\\n    using ERC7739Utils for *;\\n    using MessageHashUtils for bytes32;\\n\\n    /**\\n     * @dev Attempts validating the signature in a nested EIP-712 type.\\n     *\\n     * A nested EIP-712 type might be presented in 2 different ways:\\n     *\\n     * - As a nested EIP-712 typed data\\n     * - As a _personal_ signature (an EIP-712 mimic of the `eth_personalSign` for a smart contract)\\n     */\\n    function isValidSignature(bytes32 hash, bytes calldata signature) public view virtual returns (bytes4 result) {\\n        // For the hash `0x7739773977397739773977397739773977397739773977397739773977397739` and an empty signature,\\n        // we return the magic value too as it's assumed impossible to find a preimage for it that can be used maliciously.\\n        // Useful for simulation purposes and to validate whether the contract supports ERC-7739.\\n        return\\n            (_isValidNestedTypedDataSignature(hash, signature) || _isValidNestedPersonalSignSignature(hash, signature))\\n                ? IERC1271.isValidSignature.selector\\n                : (hash == 0x7739773977397739773977397739773977397739773977397739773977397739 && signature.length == 0)\\n                    ? bytes4(0x77390001)\\n                    : bytes4(0xffffffff);\\n    }\\n\\n    /**\\n     * @dev Nested personal signature verification.\\n     */\\n    function _isValidNestedPersonalSignSignature(bytes32 hash, bytes calldata signature) private view returns (bool) {\\n        return _rawSignatureValidation(_domainSeparatorV4().toTypedDataHash(hash.personalSignStructHash()), signature);\\n    }\\n\\n    /**\\n     * @dev Nested EIP-712 typed data verification.\\n     */\\n    function _isValidNestedTypedDataSignature(\\n        bytes32 hash,\\n        bytes calldata encodedSignature\\n    ) private view returns (bool) {\\n        // decode signature\\n        (\\n            bytes calldata signature,\\n            bytes32 appSeparator,\\n            bytes32 contentsHash,\\n            string calldata contentsDescr\\n        ) = encodedSignature.decodeTypedDataSig();\\n\\n        (\\n            ,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n\\n        ) = eip712Domain();\\n\\n        // Check that contentHash and separator are correct\\n        // Rebuild nested hash\\n        return\\n            hash == appSeparator.toTypedDataHash(contentsHash) &&\\n            bytes(contentsDescr).length != 0 &&\\n            _rawSignatureValidation(\\n                appSeparator.toTypedDataHash(\\n                    ERC7739Utils.typedDataSignStructHash(\\n                        contentsDescr,\\n                        contentsHash,\\n                        abi.encode(keccak256(bytes(name)), keccak256(bytes(version)), chainId, verifyingContract, salt)\\n                    )\\n                ),\\n                signature\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x9efd978bf2705971fd3843628b653755746c3d36d48e78e4c4ce05817fa5b913\",\"license\":\"MIT\"},\"@openzeppelin/community-contracts/contracts/utils/cryptography/ERC7739Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {Calldata} from \\\"@openzeppelin/contracts/utils/Calldata.sol\\\";\\n\\n/**\\n * @dev Utilities to process https://ercs.ethereum.org/ERCS/erc-7739[ERC-7739] typed data signatures\\n * that are specific to an EIP-712 domain.\\n *\\n * This library provides methods to wrap, unwrap and operate over typed data signatures with a defensive\\n * rehashing mechanism that includes the application's\\n * https://docs.openzeppelin.com/contracts/api/utils#EIP712-_domainSeparatorV4[EIP-712]\\n * and preserves readability of the signed content using an EIP-712 nested approach.\\n *\\n * A smart contract domain can validate a signature for a typed data structure in two ways:\\n *\\n * - As an application validating a typed data signature. See {typedDataSignStructHash}.\\n * - As a smart contract validating a raw message signature. See {personalSignStructHash}.\\n *\\n * NOTE: A provider for a smart contract wallet would need to return this signature as the\\n * result of a call to `personal_sign` or `eth_signTypedData`, and this may be unsupported by\\n * API clients that expect a return value of 129 bytes, or specifically the `r,s,v` parameters\\n * of an https://docs.openzeppelin.com/contracts/api/utils#ECDSA[ECDSA] signature, as is for\\n * example specified for https://docs.openzeppelin.com/contracts/api/utils#EIP712[EIP-712].\\n */\\nlibrary ERC7739Utils {\\n    /**\\n     * @dev An EIP-712 type to represent \\\"personal\\\" signatures\\n     * (i.e. mimic of `personal_sign` for smart contracts).\\n     */\\n    bytes32 private constant PERSONAL_SIGN_TYPEHASH = keccak256(\\\"PersonalSign(bytes prefixed)\\\");\\n\\n    /**\\n     * @dev Error when the contents type is invalid. See {tryValidateContentsType}.\\n     */\\n    error InvalidContentsType();\\n\\n    /**\\n     * @dev Nest a signature for a given EIP-712 type into a nested signature for the domain of the app.\\n     *\\n     * Counterpart of {decodeTypedDataSig} to extract the original signature and the nested components.\\n     */\\n    function encodeTypedDataSig(\\n        bytes memory signature,\\n        bytes32 appSeparator,\\n        bytes32 contentsHash,\\n        string memory contentsDescr\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(signature, appSeparator, contentsHash, contentsDescr, uint16(bytes(contentsDescr).length));\\n    }\\n\\n    /**\\n     * @dev Parses a nested signature into its components.\\n     *\\n     * Constructed as follows:\\n     *\\n     * `signature \\u2016 DOMAIN_SEPARATOR \\u2016 contentsHash \\u2016 contentsDescr \\u2016 uint16(contentsDescr.length)`\\n     *\\n     * - `signature` is the original signature for the nested struct hash that includes the \\\"contents\\\" hash\\n     * - `DOMAIN_SEPARATOR` is the EIP-712 {EIP712-_domainSeparatorV4} of the smart contract verifying the signature\\n     * - `contentsHash` is the hash of the underlying data structure or message\\n     * - `contentsDescr` is a descriptor of the \\\"contents\\\" part of the the EIP-712 type of the nested signature\\n     */\\n    function decodeTypedDataSig(\\n        bytes calldata encodedSignature\\n    )\\n        internal\\n        pure\\n        returns (bytes calldata signature, bytes32 appSeparator, bytes32 contentsHash, string calldata contentsDescr)\\n    {\\n        unchecked {\\n            uint256 sigLength = encodedSignature.length;\\n\\n            if (sigLength < 4) return (Calldata.emptyBytes(), 0, 0, Calldata.emptyString());\\n\\n            uint256 contentsDescrEnd = sigLength - 2; // Last 2 bytes\\n            uint256 contentsDescrLength = uint16(bytes2(encodedSignature[contentsDescrEnd:]));\\n\\n            if (contentsDescrLength + 64 > contentsDescrEnd)\\n                return (Calldata.emptyBytes(), 0, 0, Calldata.emptyString());\\n\\n            uint256 contentsHashEnd = contentsDescrEnd - contentsDescrLength;\\n            uint256 separatorEnd = contentsHashEnd - 32;\\n            uint256 signatureEnd = separatorEnd - 32;\\n\\n            signature = encodedSignature[:signatureEnd];\\n            appSeparator = bytes32(encodedSignature[signatureEnd:separatorEnd]);\\n            contentsHash = bytes32(encodedSignature[separatorEnd:contentsHashEnd]);\\n            contentsDescr = string(encodedSignature[contentsHashEnd:contentsDescrEnd]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Nests an `ERC-191` digest into a `PersonalSign` EIP-712 struct, and return the corresponding struct hash.\\n     * This struct hash must be combined with a domain separator, using {MessageHashUtils-toTypedDataHash} before\\n     * being verified/recovered.\\n     *\\n     * This is used to simulates the `personal_sign` RPC method in the context of smart contracts.\\n     */\\n    function personalSignStructHash(bytes32 contents) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(PERSONAL_SIGN_TYPEHASH, contents));\\n    }\\n\\n    /**\\n     * @dev Nests an `EIP-712` hash (`contents`) into a `TypedDataSign` EIP-712 struct, and return the corresponding\\n     * struct hash. This struct hash must be combined with a domain separator, using {MessageHashUtils-toTypedDataHash}\\n     * before being verified/recovered.\\n     */\\n    function typedDataSignStructHash(\\n        string calldata contentsTypeName,\\n        string calldata contentsType,\\n        bytes32 contentsHash,\\n        bytes memory domainBytes\\n    ) internal pure returns (bytes32 result) {\\n        return\\n            bytes(contentsTypeName).length == 0\\n                ? bytes32(0)\\n                : keccak256(\\n                    abi.encodePacked(typedDataSignTypehash(contentsTypeName, contentsType), contentsHash, domainBytes)\\n                );\\n    }\\n\\n    /**\\n     * @dev Variant of {typedDataSignStructHash-string-string-bytes32-string-bytes} that takes a content descriptor\\n     * and decodes the `contentsTypeName` and `contentsType` out of it.\\n     */\\n    function typedDataSignStructHash(\\n        string calldata contentsDescr,\\n        bytes32 contentsHash,\\n        bytes memory domainBytes\\n    ) internal pure returns (bytes32 result) {\\n        (string calldata contentsTypeName, string calldata contentsType) = decodeContentsDescr(contentsDescr);\\n\\n        return typedDataSignStructHash(contentsTypeName, contentsType, contentsHash, domainBytes);\\n    }\\n\\n    /**\\n     * @dev Compute the EIP-712 typehash of the `TypedDataSign` structure for a given type (and typename).\\n     */\\n    function typedDataSignTypehash(\\n        string calldata contentsTypeName,\\n        string calldata contentsType\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"TypedDataSign(\\\",\\n                    contentsTypeName,\\n                    \\\" contents,string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\",\\n                    contentsType\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Parse the type name out of the ERC-7739 contents type description. Supports both the implicit and explicit\\n     * modes.\\n     *\\n     * Following ERC-7739 specifications, a `contentsTypeName` is considered invalid if it's empty or it contains\\n     * any of the following bytes , )\\\\x00\\n     *\\n     * If the `contentsType` is invalid, this returns an empty string. Otherwise, the return string has non-zero\\n     * length.\\n     */\\n    function decodeContentsDescr(\\n        string calldata contentsDescr\\n    ) internal pure returns (string calldata contentsTypeName, string calldata contentsType) {\\n        bytes calldata buffer = bytes(contentsDescr);\\n        if (buffer.length == 0) {\\n            // pass through (fail)\\n        } else if (buffer[buffer.length - 1] == bytes1(\\\")\\\")) {\\n            // Implicit mode: read contentsTypeName for the beginning, and keep the complete descr\\n            for (uint256 i = 0; i < buffer.length; ++i) {\\n                bytes1 current = buffer[i];\\n                if (current == bytes1(\\\"(\\\")) {\\n                    // if name is empty - passthrough (fail)\\n                    if (i == 0) break;\\n                    // we found the end of the contentsTypeName\\n                    return (string(buffer[:i]), contentsDescr);\\n                } else if (_isForbiddenChar(current)) {\\n                    // we found an invalid character (forbidden) - passthrough (fail)\\n                    break;\\n                }\\n            }\\n        } else {\\n            // Explicit mode: read contentsTypeName for the end, and remove it from the descr\\n            for (uint256 i = buffer.length; i > 0; --i) {\\n                bytes1 current = buffer[i - 1];\\n                if (current == bytes1(\\\")\\\")) {\\n                    // we found the end of the contentsTypeName\\n                    return (string(buffer[i:]), string(buffer[:i]));\\n                } else if (_isForbiddenChar(current)) {\\n                    // we found an invalid character (forbidden) - passthrough (fail)\\n                    break;\\n                }\\n            }\\n        }\\n        return (Calldata.emptyString(), Calldata.emptyString());\\n    }\\n\\n    function _isForbiddenChar(bytes1 char) private pure returns (bool) {\\n        return char == 0x00 || char == bytes1(\\\" \\\") || char == bytes1(\\\",\\\") || char == bytes1(\\\"(\\\") || char == bytes1(\\\")\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc9e48319b5b46c1fc5ef93c0e6781574f2c327e12e5577dfa85fa166d28222a6\",\"license\":\"MIT\"},\"@openzeppelin/community-contracts/contracts/utils/cryptography/SignerERC7702.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {AbstractSigner} from \\\"./AbstractSigner.sol\\\";\\n\\n/**\\n * @dev Implementation of {AbstractSigner} for implementation for an EOA. Useful for ERC-7702 accounts.\\n */\\nabstract contract SignerERC7702 is AbstractSigner {\\n    /**\\n     * @dev Validates the signature using the EOA's address (ie. `address(this)`).\\n     */\\n    function _rawSignatureValidation(\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view virtual override returns (bool) {\\n        (address recovered, ECDSA.RecoverError err, ) = ECDSA.tryRecover(hash, signature);\\n        return address(this) == recovered && err == ECDSA.RecoverError.NoError;\\n    }\\n}\\n\",\"keccak256\":\"0x23f9ee7679651e0aac91d0a58062fb9d34dd9e2ec6a5b74d1be8f32e4dd2e33d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/account/utils/draft-ERC4337Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (account/utils/draft-ERC4337Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IEntryPoint, PackedUserOperation} from \\\"../../interfaces/draft-IERC4337.sol\\\";\\nimport {Math} from \\\"../../utils/math/Math.sol\\\";\\nimport {Calldata} from \\\"../../utils/Calldata.sol\\\";\\nimport {Packing} from \\\"../../utils/Packing.sol\\\";\\n\\n/**\\n * @dev Library with common ERC-4337 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-4337[ERC-4337].\\n */\\nlibrary ERC4337Utils {\\n    using Packing for *;\\n\\n    /// @dev Address of the entrypoint v0.7.0\\n    IEntryPoint internal constant ENTRYPOINT_V07 = IEntryPoint(0x0000000071727De22E5E9d8BAf0edAc6f37da032);\\n\\n    /// @dev For simulation purposes, validateUserOp (and validatePaymasterUserOp) return this value on success.\\n    uint256 internal constant SIG_VALIDATION_SUCCESS = 0;\\n\\n    /// @dev For simulation purposes, validateUserOp (and validatePaymasterUserOp) must return this value in case of signature failure, instead of revert.\\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\\n\\n    /// @dev Parses the validation data into its components. See {packValidationData}.\\n    function parseValidationData(\\n        uint256 validationData\\n    ) internal pure returns (address aggregator, uint48 validAfter, uint48 validUntil) {\\n        validAfter = uint48(bytes32(validationData).extract_32_6(0));\\n        validUntil = uint48(bytes32(validationData).extract_32_6(6));\\n        aggregator = address(bytes32(validationData).extract_32_20(12));\\n        if (validUntil == 0) validUntil = type(uint48).max;\\n    }\\n\\n    /// @dev Packs the validation data into a single uint256. See {parseValidationData}.\\n    function packValidationData(\\n        address aggregator,\\n        uint48 validAfter,\\n        uint48 validUntil\\n    ) internal pure returns (uint256) {\\n        return uint256(bytes6(validAfter).pack_6_6(bytes6(validUntil)).pack_12_20(bytes20(aggregator)));\\n    }\\n\\n    /// @dev Same as {packValidationData}, but with a boolean signature success flag.\\n    function packValidationData(bool sigSuccess, uint48 validAfter, uint48 validUntil) internal pure returns (uint256) {\\n        return\\n            packValidationData(\\n                address(uint160(Math.ternary(sigSuccess, SIG_VALIDATION_SUCCESS, SIG_VALIDATION_FAILED))),\\n                validAfter,\\n                validUntil\\n            );\\n    }\\n\\n    /**\\n     * @dev Combines two validation data into a single one.\\n     *\\n     * The `aggregator` is set to {SIG_VALIDATION_SUCCESS} if both are successful, while\\n     * the `validAfter` is the maximum and the `validUntil` is the minimum of both.\\n     */\\n    function combineValidationData(uint256 validationData1, uint256 validationData2) internal pure returns (uint256) {\\n        (address aggregator1, uint48 validAfter1, uint48 validUntil1) = parseValidationData(validationData1);\\n        (address aggregator2, uint48 validAfter2, uint48 validUntil2) = parseValidationData(validationData2);\\n\\n        bool success = aggregator1 == address(uint160(SIG_VALIDATION_SUCCESS)) &&\\n            aggregator2 == address(uint160(SIG_VALIDATION_SUCCESS));\\n        uint48 validAfter = uint48(Math.max(validAfter1, validAfter2));\\n        uint48 validUntil = uint48(Math.min(validUntil1, validUntil2));\\n        return packValidationData(success, validAfter, validUntil);\\n    }\\n\\n    /// @dev Returns the aggregator of the `validationData` and whether it is out of time range.\\n    function getValidationData(uint256 validationData) internal view returns (address aggregator, bool outOfTimeRange) {\\n        (address aggregator_, uint48 validAfter, uint48 validUntil) = parseValidationData(validationData);\\n        return (aggregator_, block.timestamp < validAfter || validUntil < block.timestamp);\\n    }\\n\\n    /// @dev Computes the hash of a user operation for a given entrypoint and chainid.\\n    function hash(\\n        PackedUserOperation calldata self,\\n        address entrypoint,\\n        uint256 chainid\\n    ) internal pure returns (bytes32) {\\n        bytes32 result = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    abi.encode(\\n                        self.sender,\\n                        self.nonce,\\n                        keccak256(self.initCode),\\n                        keccak256(self.callData),\\n                        self.accountGasLimits,\\n                        self.preVerificationGas,\\n                        self.gasFees,\\n                        keccak256(self.paymasterAndData)\\n                    )\\n                ),\\n                entrypoint,\\n                chainid\\n            )\\n        );\\n        return result;\\n    }\\n\\n    /// @dev Returns `factory` from the {PackedUserOperation}, or address(0) if the initCode is empty or not properly formatted.\\n    function factory(PackedUserOperation calldata self) internal pure returns (address) {\\n        return self.initCode.length < 20 ? address(0) : address(bytes20(self.initCode[0:20]));\\n    }\\n\\n    /// @dev Returns `factoryData` from the {PackedUserOperation}, or empty bytes if the initCode is empty or not properly formatted.\\n    function factoryData(PackedUserOperation calldata self) internal pure returns (bytes calldata) {\\n        return self.initCode.length < 20 ? Calldata.emptyBytes() : self.initCode[20:];\\n    }\\n\\n    /// @dev Returns `verificationGasLimit` from the {PackedUserOperation}.\\n    function verificationGasLimit(PackedUserOperation calldata self) internal pure returns (uint256) {\\n        return uint128(self.accountGasLimits.extract_32_16(0));\\n    }\\n\\n    /// @dev Returns `callGasLimit` from the {PackedUserOperation}.\\n    function callGasLimit(PackedUserOperation calldata self) internal pure returns (uint256) {\\n        return uint128(self.accountGasLimits.extract_32_16(16));\\n    }\\n\\n    /// @dev Returns the first section of `gasFees` from the {PackedUserOperation}.\\n    function maxPriorityFeePerGas(PackedUserOperation calldata self) internal pure returns (uint256) {\\n        return uint128(self.gasFees.extract_32_16(0));\\n    }\\n\\n    /// @dev Returns the second section of `gasFees` from the {PackedUserOperation}.\\n    function maxFeePerGas(PackedUserOperation calldata self) internal pure returns (uint256) {\\n        return uint128(self.gasFees.extract_32_16(16));\\n    }\\n\\n    /// @dev Returns the total gas price for the {PackedUserOperation} (ie. `maxFeePerGas` or `maxPriorityFeePerGas + basefee`).\\n    function gasPrice(PackedUserOperation calldata self) internal view returns (uint256) {\\n        unchecked {\\n            // Following values are \\\"per gas\\\"\\n            uint256 maxPriorityFee = maxPriorityFeePerGas(self);\\n            uint256 maxFee = maxFeePerGas(self);\\n            return Math.min(maxFee, maxPriorityFee + block.basefee);\\n        }\\n    }\\n\\n    /// @dev Returns the first section of `paymasterAndData` from the {PackedUserOperation}.\\n    function paymaster(PackedUserOperation calldata self) internal pure returns (address) {\\n        return self.paymasterAndData.length < 52 ? address(0) : address(bytes20(self.paymasterAndData[0:20]));\\n    }\\n\\n    /// @dev Returns the second section of `paymasterAndData` from the {PackedUserOperation}.\\n    function paymasterVerificationGasLimit(PackedUserOperation calldata self) internal pure returns (uint256) {\\n        return self.paymasterAndData.length < 52 ? 0 : uint128(bytes16(self.paymasterAndData[20:36]));\\n    }\\n\\n    /// @dev Returns the third section of `paymasterAndData` from the {PackedUserOperation}.\\n    function paymasterPostOpGasLimit(PackedUserOperation calldata self) internal pure returns (uint256) {\\n        return self.paymasterAndData.length < 52 ? 0 : uint128(bytes16(self.paymasterAndData[36:52]));\\n    }\\n\\n    /// @dev Returns the fourth section of `paymasterAndData` from the {PackedUserOperation}.\\n    function paymasterData(PackedUserOperation calldata self) internal pure returns (bytes calldata) {\\n        return self.paymasterAndData.length < 52 ? Calldata.emptyBytes() : self.paymasterAndData[52:];\\n    }\\n}\\n\",\"keccak256\":\"0x8cdf54507062676831ef5001611ed88847dfdc926e6e1677a465794cbb1f199a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/account/utils/draft-ERC7579Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (account/utils/draft-ERC7579Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Execution} from \\\"../../interfaces/draft-IERC7579.sol\\\";\\nimport {Packing} from \\\"../../utils/Packing.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\n\\ntype Mode is bytes32;\\ntype CallType is bytes1;\\ntype ExecType is bytes1;\\ntype ModeSelector is bytes4;\\ntype ModePayload is bytes22;\\n\\n/**\\n * @dev Library with common ERC-7579 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-7579[ERC-7579].\\n */\\n// slither-disable-next-line unused-state\\nlibrary ERC7579Utils {\\n    using Packing for *;\\n\\n    /// @dev A single `call` execution.\\n    CallType internal constant CALLTYPE_SINGLE = CallType.wrap(0x00);\\n\\n    /// @dev A batch of `call` executions.\\n    CallType internal constant CALLTYPE_BATCH = CallType.wrap(0x01);\\n\\n    /// @dev A `delegatecall` execution.\\n    CallType internal constant CALLTYPE_DELEGATECALL = CallType.wrap(0xFF);\\n\\n    /// @dev Default execution type that reverts on failure.\\n    ExecType internal constant EXECTYPE_DEFAULT = ExecType.wrap(0x00);\\n\\n    /// @dev Execution type that does not revert on failure.\\n    ExecType internal constant EXECTYPE_TRY = ExecType.wrap(0x01);\\n\\n    /**\\n     * @dev Emits when an {EXECTYPE_TRY} execution fails.\\n     * @param batchExecutionIndex The index of the failed call in the execution batch.\\n     * @param returndata The returned data from the failed call.\\n     */\\n    event ERC7579TryExecuteFail(uint256 batchExecutionIndex, bytes returndata);\\n\\n    /// @dev The provided {CallType} is not supported.\\n    error ERC7579UnsupportedCallType(CallType callType);\\n\\n    /// @dev The provided {ExecType} is not supported.\\n    error ERC7579UnsupportedExecType(ExecType execType);\\n\\n    /// @dev The provided module doesn't match the provided module type.\\n    error ERC7579MismatchedModuleTypeId(uint256 moduleTypeId, address module);\\n\\n    /// @dev The module is not installed.\\n    error ERC7579UninstalledModule(uint256 moduleTypeId, address module);\\n\\n    /// @dev The module is already installed.\\n    error ERC7579AlreadyInstalledModule(uint256 moduleTypeId, address module);\\n\\n    /// @dev The module type is not supported.\\n    error ERC7579UnsupportedModuleType(uint256 moduleTypeId);\\n\\n    /// @dev Input calldata not properly formatted and possibly malicious.\\n    error ERC7579DecodingError();\\n\\n    /// @dev Executes a single call.\\n    function execSingle(\\n        bytes calldata executionCalldata,\\n        ExecType execType\\n    ) internal returns (bytes[] memory returnData) {\\n        (address target, uint256 value, bytes calldata callData) = decodeSingle(executionCalldata);\\n        returnData = new bytes[](1);\\n        returnData[0] = _call(0, execType, target, value, callData);\\n    }\\n\\n    /// @dev Executes a batch of calls.\\n    function execBatch(\\n        bytes calldata executionCalldata,\\n        ExecType execType\\n    ) internal returns (bytes[] memory returnData) {\\n        Execution[] calldata executionBatch = decodeBatch(executionCalldata);\\n        returnData = new bytes[](executionBatch.length);\\n        for (uint256 i = 0; i < executionBatch.length; ++i) {\\n            returnData[i] = _call(\\n                i,\\n                execType,\\n                executionBatch[i].target,\\n                executionBatch[i].value,\\n                executionBatch[i].callData\\n            );\\n        }\\n    }\\n\\n    /// @dev Executes a delegate call.\\n    function execDelegateCall(\\n        bytes calldata executionCalldata,\\n        ExecType execType\\n    ) internal returns (bytes[] memory returnData) {\\n        (address target, bytes calldata callData) = decodeDelegate(executionCalldata);\\n        returnData = new bytes[](1);\\n        returnData[0] = _delegatecall(0, execType, target, callData);\\n    }\\n\\n    /// @dev Encodes the mode with the provided parameters. See {decodeMode}.\\n    function encodeMode(\\n        CallType callType,\\n        ExecType execType,\\n        ModeSelector selector,\\n        ModePayload payload\\n    ) internal pure returns (Mode mode) {\\n        return\\n            Mode.wrap(\\n                CallType\\n                    .unwrap(callType)\\n                    .pack_1_1(ExecType.unwrap(execType))\\n                    .pack_2_4(bytes4(0))\\n                    .pack_6_4(ModeSelector.unwrap(selector))\\n                    .pack_10_22(ModePayload.unwrap(payload))\\n            );\\n    }\\n\\n    /// @dev Decodes the mode into its parameters. See {encodeMode}.\\n    function decodeMode(\\n        Mode mode\\n    ) internal pure returns (CallType callType, ExecType execType, ModeSelector selector, ModePayload payload) {\\n        return (\\n            CallType.wrap(Packing.extract_32_1(Mode.unwrap(mode), 0)),\\n            ExecType.wrap(Packing.extract_32_1(Mode.unwrap(mode), 1)),\\n            ModeSelector.wrap(Packing.extract_32_4(Mode.unwrap(mode), 6)),\\n            ModePayload.wrap(Packing.extract_32_22(Mode.unwrap(mode), 10))\\n        );\\n    }\\n\\n    /// @dev Encodes a single call execution. See {decodeSingle}.\\n    function encodeSingle(\\n        address target,\\n        uint256 value,\\n        bytes calldata callData\\n    ) internal pure returns (bytes memory executionCalldata) {\\n        return abi.encodePacked(target, value, callData);\\n    }\\n\\n    /// @dev Decodes a single call execution. See {encodeSingle}.\\n    function decodeSingle(\\n        bytes calldata executionCalldata\\n    ) internal pure returns (address target, uint256 value, bytes calldata callData) {\\n        target = address(bytes20(executionCalldata[0:20]));\\n        value = uint256(bytes32(executionCalldata[20:52]));\\n        callData = executionCalldata[52:];\\n    }\\n\\n    /// @dev Encodes a delegate call execution. See {decodeDelegate}.\\n    function encodeDelegate(\\n        address target,\\n        bytes calldata callData\\n    ) internal pure returns (bytes memory executionCalldata) {\\n        return abi.encodePacked(target, callData);\\n    }\\n\\n    /// @dev Decodes a delegate call execution. See {encodeDelegate}.\\n    function decodeDelegate(\\n        bytes calldata executionCalldata\\n    ) internal pure returns (address target, bytes calldata callData) {\\n        target = address(bytes20(executionCalldata[0:20]));\\n        callData = executionCalldata[20:];\\n    }\\n\\n    /// @dev Encodes a batch of executions. See {decodeBatch}.\\n    function encodeBatch(Execution[] memory executionBatch) internal pure returns (bytes memory executionCalldata) {\\n        return abi.encode(executionBatch);\\n    }\\n\\n    /// @dev Decodes a batch of executions. See {encodeBatch}.\\n    ///\\n    /// NOTE: This function runs some checks and will throw a {ERC7579DecodingError} if the input is not properly formatted.\\n    function decodeBatch(bytes calldata executionCalldata) internal pure returns (Execution[] calldata executionBatch) {\\n        unchecked {\\n            uint256 bufferLength = executionCalldata.length;\\n\\n            // Check executionCalldata is not empty.\\n            if (bufferLength < 32) revert ERC7579DecodingError();\\n\\n            // Get the offset of the array (pointer to the array length).\\n            uint256 arrayLengthOffset = uint256(bytes32(executionCalldata[0:32]));\\n\\n            // The array length (at arrayLengthOffset) should be 32 bytes long. We check that this is within the\\n            // buffer bounds. Since we know bufferLength is at least 32, we can subtract with no overflow risk.\\n            if (arrayLengthOffset > bufferLength - 32) revert ERC7579DecodingError();\\n\\n            // Get the array length. arrayLengthOffset + 32 is bounded by bufferLength so it does not overflow.\\n            uint256 arrayLength = uint256(bytes32(executionCalldata[arrayLengthOffset:arrayLengthOffset + 32]));\\n\\n            // Check that the buffer is long enough to store the array elements as \\\"offset pointer\\\":\\n            // - each element of the array is an \\\"offset pointer\\\" to the data.\\n            // - each \\\"offset pointer\\\" (to an array element) takes 32 bytes.\\n            // - validity of the calldata at that location is checked when the array element is accessed, so we only\\n            //   need to check that the buffer is large enough to hold the pointers.\\n            //\\n            // Since we know bufferLength is at least arrayLengthOffset + 32, we can subtract with no overflow risk.\\n            // Solidity limits length of such arrays to 2**64-1, this guarantees `arrayLength * 32` does not overflow.\\n            if (arrayLength > type(uint64).max || bufferLength - arrayLengthOffset - 32 < arrayLength * 32)\\n                revert ERC7579DecodingError();\\n\\n            assembly (\\\"memory-safe\\\") {\\n                executionBatch.offset := add(add(executionCalldata.offset, arrayLengthOffset), 32)\\n                executionBatch.length := arrayLength\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes a `call` to the target with the provided {ExecType}.\\n    function _call(\\n        uint256 index,\\n        ExecType execType,\\n        address target,\\n        uint256 value,\\n        bytes calldata data\\n    ) private returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _validateExecutionMode(index, execType, success, returndata);\\n    }\\n\\n    /// @dev Executes a `delegatecall` to the target with the provided {ExecType}.\\n    function _delegatecall(\\n        uint256 index,\\n        ExecType execType,\\n        address target,\\n        bytes calldata data\\n    ) private returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _validateExecutionMode(index, execType, success, returndata);\\n    }\\n\\n    /// @dev Validates the execution mode and returns the returndata.\\n    function _validateExecutionMode(\\n        uint256 index,\\n        ExecType execType,\\n        bool success,\\n        bytes memory returndata\\n    ) private returns (bytes memory) {\\n        if (execType == ERC7579Utils.EXECTYPE_DEFAULT) {\\n            Address.verifyCallResult(success, returndata);\\n        } else if (execType == ERC7579Utils.EXECTYPE_TRY) {\\n            if (!success) emit ERC7579TryExecuteFail(index, returndata);\\n        } else {\\n            revert ERC7579UnsupportedExecType(execType);\\n        }\\n        return returndata;\\n    }\\n}\\n\\n// Operators\\nusing {eqCallType as ==} for CallType global;\\nusing {eqExecType as ==} for ExecType global;\\nusing {eqModeSelector as ==} for ModeSelector global;\\nusing {eqModePayload as ==} for ModePayload global;\\n\\n/// @dev Compares two `CallType` values for equality.\\nfunction eqCallType(CallType a, CallType b) pure returns (bool) {\\n    return CallType.unwrap(a) == CallType.unwrap(b);\\n}\\n\\n/// @dev Compares two `ExecType` values for equality.\\nfunction eqExecType(ExecType a, ExecType b) pure returns (bool) {\\n    return ExecType.unwrap(a) == ExecType.unwrap(b);\\n}\\n\\n/// @dev Compares two `ModeSelector` values for equality.\\nfunction eqModeSelector(ModeSelector a, ModeSelector b) pure returns (bool) {\\n    return ModeSelector.unwrap(a) == ModeSelector.unwrap(b);\\n}\\n\\n/// @dev Compares two `ModePayload` values for equality.\\nfunction eqModePayload(ModePayload a, ModePayload b) pure returns (bool) {\\n    return ModePayload.unwrap(a) == ModePayload.unwrap(b);\\n}\\n\",\"keccak256\":\"0x20a9f99cf81e1b5cddb890e99e4d1c8121821f67274af6a61e13df69e6e3a9d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with `hash`\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xef3451d5b46cd9e93e5c0141af2c05f46743e7406c185cf327673b35a5b46d0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC4337.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (interfaces/draft-IERC4337.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev A https://github.com/ethereum/ercs/blob/master/ERCS/erc-4337.md#useroperation[user operation] is composed of the following elements:\\n * - `sender` (`address`): The account making the operation\\n * - `nonce` (`uint256`): Anti-replay parameter (see \\u201cSemi-abstracted Nonce Support\\u201d )\\n * - `factory` (`address`): account factory, only for new accounts\\n * - `factoryData` (`bytes`): data for account factory (only if account factory exists)\\n * - `callData` (`bytes`): The data to pass to the sender during the main execution call\\n * - `callGasLimit` (`uint256`): The amount of gas to allocate the main execution call\\n * - `verificationGasLimit` (`uint256`): The amount of gas to allocate for the verification step\\n * - `preVerificationGas` (`uint256`): Extra gas to pay the bundler\\n * - `maxFeePerGas` (`uint256`): Maximum fee per gas (similar to EIP-1559 max_fee_per_gas)\\n * - `maxPriorityFeePerGas` (`uint256`): Maximum priority fee per gas (similar to EIP-1559 max_priority_fee_per_gas)\\n * - `paymaster` (`address`): Address of paymaster contract, (or empty, if account pays for itself)\\n * - `paymasterVerificationGasLimit` (`uint256`): The amount of gas to allocate for the paymaster validation code\\n * - `paymasterPostOpGasLimit` (`uint256`): The amount of gas to allocate for the paymaster post-operation code\\n * - `paymasterData` (`bytes`): Data for paymaster (only if paymaster exists)\\n * - `signature` (`bytes`): Data passed into the account to verify authorization\\n *\\n * When passed to on-chain contacts, the following packed version is used.\\n * - `sender` (`address`)\\n * - `nonce` (`uint256`)\\n * - `initCode` (`bytes`): concatenation of factory address and factoryData (or empty)\\n * - `callData` (`bytes`)\\n * - `accountGasLimits` (`bytes32`): concatenation of verificationGas (16 bytes) and callGas (16 bytes)\\n * - `preVerificationGas` (`uint256`)\\n * - `gasFees` (`bytes32`): concatenation of maxPriorityFeePerGas (16 bytes) and maxFeePerGas (16 bytes)\\n * - `paymasterAndData` (`bytes`): concatenation of paymaster fields (or empty)\\n * - `signature` (`bytes`)\\n */\\nstruct PackedUserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode; // `abi.encodePacked(factory, factoryData)`\\n    bytes callData;\\n    bytes32 accountGasLimits; // `abi.encodePacked(verificationGasLimit, callGasLimit)` 16 bytes each\\n    uint256 preVerificationGas;\\n    bytes32 gasFees; // `abi.encodePacked(maxPriorityFeePerGas, maxFeePerGas)` 16 bytes each\\n    bytes paymasterAndData; // `abi.encodePacked(paymaster, paymasterVerificationGasLimit, paymasterPostOpGasLimit, paymasterData)` (20 bytes, 16 bytes, 16 bytes, dynamic)\\n    bytes signature;\\n}\\n\\n/**\\n * @dev Aggregates and validates multiple signatures for a batch of user operations.\\n *\\n * A contract could implement this interface with custom validation schemes that allow signature aggregation,\\n * enabling significant optimizations and gas savings for execution and transaction data cost.\\n *\\n * Bundlers and clients whitelist supported aggregators.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-7766[ERC-7766]\\n */\\ninterface IAggregator {\\n    /**\\n     * @dev Validates the signature for a user operation.\\n     * Returns an alternative signature that should be used during bundling.\\n     */\\n    function validateUserOpSignature(\\n        PackedUserOperation calldata userOp\\n    ) external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * @dev Returns an aggregated signature for a batch of user operation's signatures.\\n     */\\n    function aggregateSignatures(\\n        PackedUserOperation[] calldata userOps\\n    ) external view returns (bytes memory aggregatesSignature);\\n\\n    /**\\n     * @dev Validates that the aggregated signature is valid for the user operations.\\n     *\\n     * Requirements:\\n     *\\n     * - The aggregated signature MUST match the given list of operations.\\n     */\\n    function validateSignatures(PackedUserOperation[] calldata userOps, bytes calldata signature) external view;\\n}\\n\\n/**\\n * @dev Handle nonce management for accounts.\\n *\\n * Nonces are used in accounts as a replay protection mechanism and to ensure the order of user operations.\\n * To avoid limiting the number of operations an account can perform, the interface allows using parallel\\n * nonces by using a `key` parameter.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-4337#semi-abstracted-nonce-support[ERC-4337 semi-abstracted nonce support].\\n */\\ninterface IEntryPointNonces {\\n    /**\\n     * @dev Returns the nonce for a `sender` account and a `key`.\\n     *\\n     * Nonces for a certain `key` are always increasing.\\n     */\\n    function getNonce(address sender, uint192 key) external view returns (uint256 nonce);\\n}\\n\\n/**\\n * @dev Handle stake management for entities (i.e. accounts, paymasters, factories).\\n *\\n * The EntryPoint must implement the following API to let entities like paymasters have a stake,\\n * and thus have more flexibility in their storage access\\n * (see https://eips.ethereum.org/EIPS/eip-4337#reputation-scoring-and-throttlingbanning-for-global-entities[reputation, throttling and banning.])\\n */\\ninterface IEntryPointStake {\\n    /**\\n     * @dev Returns the balance of the account.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Deposits `msg.value` to the account.\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * @dev Withdraws `withdrawAmount` from the account to `withdrawAddress`.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n\\n    /**\\n     * @dev Adds stake to the account with an unstake delay of `unstakeDelaySec`.\\n     */\\n    function addStake(uint32 unstakeDelaySec) external payable;\\n\\n    /**\\n     * @dev Unlocks the stake of the account.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * @dev Withdraws the stake of the account to `withdrawAddress`.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n}\\n\\n/**\\n * @dev Entry point for user operations.\\n *\\n * User operations are validated and executed by this contract.\\n */\\ninterface IEntryPoint is IEntryPointNonces, IEntryPointStake {\\n    /**\\n     * @dev A user operation at `opIndex` failed with `reason`.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * @dev A user operation at `opIndex` failed with `reason` and `inner` returned data.\\n     */\\n    error FailedOpWithRevert(uint256 opIndex, string reason, bytes inner);\\n\\n    /**\\n     * @dev Batch of aggregated user operations per aggregator.\\n     */\\n    struct UserOpsPerAggregator {\\n        PackedUserOperation[] userOps;\\n        IAggregator aggregator;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @dev Executes a batch of user operations.\\n     * @param beneficiary Address to which gas is refunded up completing the execution.\\n     */\\n    function handleOps(PackedUserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * @dev Executes a batch of aggregated user operations per aggregator.\\n     * @param beneficiary Address to which gas is refunded up completing the execution.\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n}\\n\\n/**\\n * @dev Base interface for an ERC-4337 account.\\n */\\ninterface IAccount {\\n    /**\\n     * @dev Validates a user operation.\\n     *\\n     * * MUST validate the caller is a trusted EntryPoint\\n     * * MUST validate that the signature is a valid signature of the userOpHash, and SHOULD\\n     *   return SIG_VALIDATION_FAILED (and not revert) on signature mismatch. Any other error MUST revert.\\n     * * MUST pay the entryPoint (caller) at least the \\u201cmissingAccountFunds\\u201d (which might\\n     *   be zero, in case the current account\\u2019s deposit is high enough)\\n     *\\n     * Returns an encoded packed validation data that is composed of the following elements:\\n     *\\n     * - `authorizer` (`address`): 0 for success, 1 for failure, otherwise the address of an authorizer contract\\n     * - `validUntil` (`uint48`): The UserOp is valid only up to this time. Zero for \\u201cinfinite\\u201d.\\n     * - `validAfter` (`uint48`): The UserOp is valid only after this time.\\n     */\\n    function validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external returns (uint256 validationData);\\n}\\n\\n/**\\n * @dev Support for executing user operations by prepending the {executeUserOp} function selector\\n * to the UserOperation's `callData`.\\n */\\ninterface IAccountExecute {\\n    /**\\n     * @dev Executes a user operation.\\n     */\\n    function executeUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash) external;\\n}\\n\\n/**\\n * @dev Interface for a paymaster contract that agrees to pay for the gas costs of a user operation.\\n *\\n * NOTE: A paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n    enum PostOpMode {\\n        opSucceeded,\\n        opReverted,\\n        postOpReverted\\n    }\\n\\n    /**\\n     * @dev Validates whether the paymaster is willing to pay for the user operation. See\\n     * {IAccount-validateUserOp} for additional information on the return value.\\n     *\\n     * NOTE: Bundlers will reject this method if it modifies the state, unless it's whitelisted.\\n     */\\n    function validatePaymasterUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 maxCost\\n    ) external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * @dev Verifies the sender is the entrypoint.\\n     * @param actualGasCost the actual amount paid (by account or paymaster) for this UserOperation\\n     * @param actualUserOpFeePerGas total gas used by this UserOperation (including preVerification, creation, validation and execution)\\n     */\\n    function postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost,\\n        uint256 actualUserOpFeePerGas\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe9d0f9f3c6626d14e849d1295b9222d58b5d4a48c7d3f0d0c82dcf0c6542b9bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC7579.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (interfaces/draft-IERC7579.sol)\\npragma solidity ^0.8.20;\\n\\nimport {PackedUserOperation} from \\\"./draft-IERC4337.sol\\\";\\n\\nuint256 constant VALIDATION_SUCCESS = 0;\\nuint256 constant VALIDATION_FAILED = 1;\\nuint256 constant MODULE_TYPE_VALIDATOR = 1;\\nuint256 constant MODULE_TYPE_EXECUTOR = 2;\\nuint256 constant MODULE_TYPE_FALLBACK = 3;\\nuint256 constant MODULE_TYPE_HOOK = 4;\\n\\n/// @dev Minimal configuration interface for ERC-7579 modules\\ninterface IERC7579Module {\\n    /**\\n     * @dev This function is called by the smart account during installation of the module\\n     * @param data arbitrary data that may be required on the module during `onInstall` initialization\\n     *\\n     * MUST revert on error (e.g. if module is already enabled)\\n     */\\n    function onInstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev This function is called by the smart account during uninstallation of the module\\n     * @param data arbitrary data that may be required on the module during `onUninstall` de-initialization\\n     *\\n     * MUST revert on error\\n     */\\n    function onUninstall(bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns boolean value if module is a certain type\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     *\\n     * MUST return true if the module is of the given type and false otherwise\\n     */\\n    function isModuleType(uint256 moduleTypeId) external view returns (bool);\\n}\\n\\n/**\\n * @dev ERC-7579 Validation module (type 1).\\n *\\n * A module that implements logic to validate user operations and signatures.\\n */\\ninterface IERC7579Validator is IERC7579Module {\\n    /**\\n     * @dev Validates a UserOperation\\n     * @param userOp the ERC-4337 PackedUserOperation\\n     * @param userOpHash the hash of the ERC-4337 PackedUserOperation\\n     *\\n     * MUST validate that the signature is a valid signature of the userOpHash\\n     * SHOULD return ERC-4337's SIG_VALIDATION_FAILED (and not revert) on signature mismatch\\n     * See {IAccount-validateUserOp} for additional information on the return value\\n     */\\n    function validateUserOp(PackedUserOperation calldata userOp, bytes32 userOpHash) external returns (uint256);\\n\\n    /**\\n     * @dev Validates a signature using ERC-1271\\n     * @param sender the address that sent the ERC-1271 request to the smart account\\n     * @param hash the hash of the ERC-1271 request\\n     * @param signature the signature of the ERC-1271 request\\n     *\\n     * MUST return the ERC-1271 `MAGIC_VALUE` if the signature is valid\\n     * MUST NOT modify state\\n     */\\n    function isValidSignatureWithSender(\\n        address sender,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) external view returns (bytes4);\\n}\\n\\n/**\\n * @dev ERC-7579 Hooks module (type 4).\\n *\\n * A module that implements logic to execute before and after the account executes a user operation,\\n * either individually or batched.\\n */\\ninterface IERC7579Hook is IERC7579Module {\\n    /**\\n     * @dev Called by the smart account before execution\\n     * @param msgSender the address that called the smart account\\n     * @param value the value that was sent to the smart account\\n     * @param msgData the data that was sent to the smart account\\n     *\\n     * MAY return arbitrary data in the `hookData` return value\\n     */\\n    function preCheck(\\n        address msgSender,\\n        uint256 value,\\n        bytes calldata msgData\\n    ) external returns (bytes memory hookData);\\n\\n    /**\\n     * @dev Called by the smart account after execution\\n     * @param hookData the data that was returned by the `preCheck` function\\n     *\\n     * MAY validate the `hookData` to validate transaction context of the `preCheck` function\\n     */\\n    function postCheck(bytes calldata hookData) external;\\n}\\n\\nstruct Execution {\\n    address target;\\n    uint256 value;\\n    bytes callData;\\n}\\n\\n/**\\n * @dev ERC-7579 Execution.\\n *\\n * Accounts should implement this interface so that the Entrypoint and ERC-7579 modules can execute operations.\\n */\\ninterface IERC7579Execution {\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     *\\n     * MUST ensure adequate authorization control: e.g. onlyEntryPointOrSelf if used with ERC-4337\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     */\\n    function execute(bytes32 mode, bytes calldata executionCalldata) external payable;\\n\\n    /**\\n     * @dev Executes a transaction on behalf of the account.\\n     *         This function is intended to be called by Executor Modules\\n     * @param mode The encoded execution mode of the transaction. See ModeLib.sol for details\\n     * @param executionCalldata The encoded execution call data\\n     * @return returnData An array with the returned data of each executed subcall\\n     *\\n     * MUST ensure adequate authorization control: i.e. onlyExecutorModule\\n     * If a mode is requested that is not supported by the Account, it MUST revert\\n     */\\n    function executeFromExecutor(\\n        bytes32 mode,\\n        bytes calldata executionCalldata\\n    ) external payable returns (bytes[] memory returnData);\\n}\\n\\n/**\\n * @dev ERC-7579 Account Config.\\n *\\n * Accounts should implement this interface to expose information that identifies the account, supported modules and capabilities.\\n */\\ninterface IERC7579AccountConfig {\\n    /**\\n     * @dev Returns the account id of the smart account\\n     * @return accountImplementationId the account id of the smart account\\n     *\\n     * MUST return a non-empty string\\n     * The accountId SHOULD be structured like so:\\n     *        \\\"vendorname.accountname.semver\\\"\\n     * The id SHOULD be unique across all smart accounts\\n     */\\n    function accountId() external view returns (string memory accountImplementationId);\\n\\n    /**\\n     * @dev Function to check if the account supports a certain execution mode (see above)\\n     * @param encodedMode the encoded mode\\n     *\\n     * MUST return true if the account supports the mode and false otherwise\\n     */\\n    function supportsExecutionMode(bytes32 encodedMode) external view returns (bool);\\n\\n    /**\\n     * @dev Function to check if the account supports a certain module typeId\\n     * @param moduleTypeId the module type ID according to the ERC-7579 spec\\n     *\\n     * MUST return true if the account supports the module type and false otherwise\\n     */\\n    function supportsModule(uint256 moduleTypeId) external view returns (bool);\\n}\\n\\n/**\\n * @dev ERC-7579 Module Config.\\n *\\n * Accounts should implement this interface to allow installing and uninstalling modules.\\n */\\ninterface IERC7579ModuleConfig {\\n    event ModuleInstalled(uint256 moduleTypeId, address module);\\n    event ModuleUninstalled(uint256 moduleTypeId, address module);\\n\\n    /**\\n     * @dev Installs a Module of a certain type on the smart account\\n     * @param moduleTypeId the module type ID according to the ERC-7579 spec\\n     * @param module the module address\\n     * @param initData arbitrary data that may be required on the module during `onInstall`\\n     * initialization.\\n     *\\n     * MUST implement authorization control\\n     * MUST call `onInstall` on the module with the `initData` parameter if provided\\n     * MUST emit ModuleInstalled event\\n     * MUST revert if the module is already installed or the initialization on the module failed\\n     */\\n    function installModule(uint256 moduleTypeId, address module, bytes calldata initData) external;\\n\\n    /**\\n     * @dev Uninstalls a Module of a certain type on the smart account\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param deInitData arbitrary data that may be required on the module during `onInstall`\\n     * initialization.\\n     *\\n     * MUST implement authorization control\\n     * MUST call `onUninstall` on the module with the `deInitData` parameter if provided\\n     * MUST emit ModuleUninstalled event\\n     * MUST revert if the module is not installed or the deInitialization on the module failed\\n     */\\n    function uninstallModule(uint256 moduleTypeId, address module, bytes calldata deInitData) external;\\n\\n    /**\\n     * @dev Returns whether a module is installed on the smart account\\n     * @param moduleTypeId the module type ID according the ERC-7579 spec\\n     * @param module the module address\\n     * @param additionalContext arbitrary data that may be required to determine if the module is installed\\n     *\\n     * MUST return true if the module is installed and false otherwise\\n     */\\n    function isModuleInstalled(\\n        uint256 moduleTypeId,\\n        address module,\\n        bytes calldata additionalContext\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0b2bccccbc46abbf9816dce8f021273d87955416787e99e13196180852f200d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC-1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC-1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC-1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xe103e95f854ef0cd1bba5f469175f67cd332f5c2561941f165e3dd65cee94d6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or\\n * {IERC721-setApprovalForAll}.\\n */\\nabstract contract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/Arrays.sol)\\n// This file was procedurally generated from scripts/generate/templates/Arrays.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Comparators} from \\\"./Comparators.sol\\\";\\nimport {SlotDerivation} from \\\"./SlotDerivation.sol\\\";\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using SlotDerivation for bytes32;\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Sort an array of uint256 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        uint256[] memory array,\\n        function(uint256, uint256) pure returns (bool) comp\\n    ) internal pure returns (uint256[] memory) {\\n        _quickSort(_begin(array), _end(array), comp);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of uint256 in increasing order.\\n     */\\n    function sort(uint256[] memory array) internal pure returns (uint256[] memory) {\\n        sort(array, Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of address (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        address[] memory array,\\n        function(address, address) pure returns (bool) comp\\n    ) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of address in increasing order.\\n     */\\n    function sort(address[] memory array) internal pure returns (address[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Sort an array of bytes32 (in memory) following the provided comparator function.\\n     *\\n     * This function does the sorting \\\"in place\\\", meaning that it overrides the input. The object is returned for\\n     * convenience, but that returned value can be discarded safely if the caller has a memory pointer to the array.\\n     *\\n     * NOTE: this function's cost is `O(n \\u00b7 log(n))` in average and `O(n\\u00b2)` in the worst case, with n the length of the\\n     * array. Using it in view functions that are executed through `eth_call` is safe, but one should be very careful\\n     * when executing this as part of a transaction. If the array being sorted is too large, the sort operation may\\n     * consume more gas than is available in a block, leading to potential DoS.\\n     *\\n     * IMPORTANT: Consider memory side-effects when using custom comparator functions that access memory in an unsafe way.\\n     */\\n    function sort(\\n        bytes32[] memory array,\\n        function(bytes32, bytes32) pure returns (bool) comp\\n    ) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), _castToUint256Comp(comp));\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Variant of {sort} that sorts an array of bytes32 in increasing order.\\n     */\\n    function sort(bytes32[] memory array) internal pure returns (bytes32[] memory) {\\n        sort(_castToUint256Array(array), Comparators.lt);\\n        return array;\\n    }\\n\\n    /**\\n     * @dev Performs a quick sort of a segment of memory. The segment sorted starts at `begin` (inclusive), and stops\\n     * at end (exclusive). Sorting follows the `comp` comparator.\\n     *\\n     * Invariant: `begin <= end`. This is the case when initially called by {sort} and is preserved in subcalls.\\n     *\\n     * IMPORTANT: Memory locations between `begin` and `end` are not validated/zeroed. This function should\\n     * be used only if the limits are within a memory array.\\n     */\\n    function _quickSort(uint256 begin, uint256 end, function(uint256, uint256) pure returns (bool) comp) private pure {\\n        unchecked {\\n            if (end - begin < 0x40) return;\\n\\n            // Use first element as pivot\\n            uint256 pivot = _mload(begin);\\n            // Position where the pivot should be at the end of the loop\\n            uint256 pos = begin;\\n\\n            for (uint256 it = begin + 0x20; it < end; it += 0x20) {\\n                if (comp(_mload(it), pivot)) {\\n                    // If the value stored at the iterator's position comes before the pivot, we increment the\\n                    // position of the pivot and move the value there.\\n                    pos += 0x20;\\n                    _swap(pos, it);\\n                }\\n            }\\n\\n            _swap(begin, pos); // Swap pivot into place\\n            _quickSort(begin, pos, comp); // Sort the left side of the pivot\\n            _quickSort(pos + 0x20, end, comp); // Sort the right side of the pivot\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first element of `array`.\\n     */\\n    function _begin(uint256[] memory array) private pure returns (uint256 ptr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := add(array, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Pointer to the memory location of the first memory word (32bytes) after `array`. This is the memory word\\n     * that comes just after the last element of the array.\\n     */\\n    function _end(uint256[] memory array) private pure returns (uint256 ptr) {\\n        unchecked {\\n            return _begin(array) + array.length * 0x20;\\n        }\\n    }\\n\\n    /**\\n     * @dev Load memory word (as a uint256) at location `ptr`.\\n     */\\n    function _mload(uint256 ptr) private pure returns (uint256 value) {\\n        assembly {\\n            value := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps the elements memory location `ptr1` and `ptr2`.\\n     */\\n    function _swap(uint256 ptr1, uint256 ptr2) private pure {\\n        assembly {\\n            let value1 := mload(ptr1)\\n            let value2 := mload(ptr2)\\n            mstore(ptr1, value2)\\n            mstore(ptr2, value1)\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address memory array to uint256 memory array\\n    function _castToUint256Array(address[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 memory array to uint256 memory array\\n    function _castToUint256Array(bytes32[] memory input) private pure returns (uint256[] memory output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast address comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(address, address) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /// @dev Helper: low level cast bytes32 comp function to uint256 comp function\\n    function _castToUint256Comp(\\n        function(bytes32, bytes32) pure returns (bool) input\\n    ) private pure returns (function(uint256, uint256) pure returns (bool) output) {\\n        assembly {\\n            output := input\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * NOTE: The `array` is expected to be sorted in ascending order, and to\\n     * contain no repeated elements.\\n     *\\n     * IMPORTANT: Deprecated. This implementation behaves as {lowerBound} but lacks\\n     * support for repeated elements in the array. The {lowerBound} function should\\n     * be used instead.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value greater or equal than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/lower_bound[lower_bound].\\n     */\\n    function lowerBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Searches an `array` sorted in ascending order and returns the first\\n     * index that contains a value strictly greater than `element`. If no such index\\n     * exists (i.e. all values in the array are strictly less than `element`), the array\\n     * length is returned. Time complexity O(log n).\\n     *\\n     * See C++'s https://en.cppreference.com/w/cpp/algorithm/upper_bound[upper_bound].\\n     */\\n    function upperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {lowerBound}, but with an array in memory.\\n     */\\n    function lowerBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) < element) {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            } else {\\n                high = mid;\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Same as {upperBound}, but with an array in memory.\\n     */\\n    function upperBoundMemory(uint256[] memory array, uint256 element) internal pure returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeMemoryAccess(array, mid) > element) {\\n                high = mid;\\n            } else {\\n                // this cannot overflow because mid < high\\n                unchecked {\\n                    low = mid + 1;\\n                }\\n            }\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        assembly (\\\"memory-safe\\\") {\\n            slot := arr.slot\\n        }\\n        return slot.deriveArray().offset(pos).getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(bytes32[] memory arr, uint256 pos) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(address[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(bytes32[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper to set the length of a dynamic array. Directly writing to `.length` is forbidden.\\n     *\\n     * WARNING: this does not clear elements if length is reduced, of initialize elements if length is increased.\\n     */\\n    function unsafeSetLength(uint256[] storage array, uint256 len) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(array.slot, len)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5cdbc481b8c2c9e6975d5a2bd72c40d1ef833f81fd405bdf039d6e7d33452282\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Bytes.sol)\\n\\npragma solidity ^0.8.24;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Bytes operations.\\n */\\nlibrary Bytes {\\n    /**\\n     * @dev Forward search for `s` in `buffer`\\n     * * If `s` is present in the buffer, returns the index of the first instance\\n     * * If `s` is not present in the buffer, returns type(uint256).max\\n     *\\n     * NOTE: replicates the behavior of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf[Javascript's `Array.indexOf`]\\n     */\\n    function indexOf(bytes memory buffer, bytes1 s) internal pure returns (uint256) {\\n        return indexOf(buffer, s, 0);\\n    }\\n\\n    /**\\n     * @dev Forward search for `s` in `buffer` starting at position `pos`\\n     * * If `s` is present in the buffer (at or after `pos`), returns the index of the next instance\\n     * * If `s` is not present in the buffer (at or after `pos`), returns type(uint256).max\\n     *\\n     * NOTE: replicates the behavior of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf[Javascript's `Array.indexOf`]\\n     */\\n    function indexOf(bytes memory buffer, bytes1 s, uint256 pos) internal pure returns (uint256) {\\n        uint256 length = buffer.length;\\n        for (uint256 i = pos; i < length; ++i) {\\n            if (bytes1(_unsafeReadBytesOffset(buffer, i)) == s) {\\n                return i;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n\\n    /**\\n     * @dev Backward search for `s` in `buffer`\\n     * * If `s` is present in the buffer, returns the index of the last instance\\n     * * If `s` is not present in the buffer, returns type(uint256).max\\n     *\\n     * NOTE: replicates the behavior of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf[Javascript's `Array.lastIndexOf`]\\n     */\\n    function lastIndexOf(bytes memory buffer, bytes1 s) internal pure returns (uint256) {\\n        return lastIndexOf(buffer, s, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Backward search for `s` in `buffer` starting at position `pos`\\n     * * If `s` is present in the buffer (at or before `pos`), returns the index of the previous instance\\n     * * If `s` is not present in the buffer (at or before `pos`), returns type(uint256).max\\n     *\\n     * NOTE: replicates the behavior of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf[Javascript's `Array.lastIndexOf`]\\n     */\\n    function lastIndexOf(bytes memory buffer, bytes1 s, uint256 pos) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 length = buffer.length;\\n            // NOTE here we cannot do `i = Math.min(pos + 1, length)` because `pos + 1` could overflow\\n            for (uint256 i = Math.min(pos, length - 1) + 1; i > 0; --i) {\\n                if (bytes1(_unsafeReadBytesOffset(buffer, i - 1)) == s) {\\n                    return i - 1;\\n                }\\n            }\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    /**\\n     * @dev Copies the content of `buffer`, from `start` (included) to the end of `buffer` into a new bytes object in\\n     * memory.\\n     *\\n     * NOTE: replicates the behavior of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice[Javascript's `Array.slice`]\\n     */\\n    function slice(bytes memory buffer, uint256 start) internal pure returns (bytes memory) {\\n        return slice(buffer, start, buffer.length);\\n    }\\n\\n    /**\\n     * @dev Copies the content of `buffer`, from `start` (included) to `end` (excluded) into a new bytes object in\\n     * memory.\\n     *\\n     * NOTE: replicates the behavior of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice[Javascript's `Array.slice`]\\n     */\\n    function slice(bytes memory buffer, uint256 start, uint256 end) internal pure returns (bytes memory) {\\n        // sanitize\\n        uint256 length = buffer.length;\\n        end = Math.min(end, length);\\n        start = Math.min(start, end);\\n\\n        // allocate and copy\\n        bytes memory result = new bytes(end - start);\\n        assembly (\\\"memory-safe\\\") {\\n            mcopy(add(result, 0x20), add(buffer, add(start, 0x20)), sub(end, start))\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ab20b6e0fc6e7d1c0551c0ae6cacce33d4ffcf116a24369aa9699a134317427\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/Calldata.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for manipulating objects in calldata.\\n */\\nlibrary Calldata {\\n    // slither-disable-next-line write-after-write\\n    function emptyBytes() internal pure returns (bytes calldata result) {\\n        assembly (\\\"memory-safe\\\") {\\n            result.offset := 0\\n            result.length := 0\\n        }\\n    }\\n\\n    // slither-disable-next-line write-after-write\\n    function emptyString() internal pure returns (string calldata result) {\\n        assembly (\\\"memory-safe\\\") {\\n            result.offset := 0\\n            result.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xefb6c681d1ca88203878efacfd529a29794db0fb2ebe038e0fe2b427ecb06b09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Comparators.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Comparators.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to compare values.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Comparators {\\n    function lt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    function gt(uint256 a, uint256 b) internal pure returns (bool) {\\n        return a > b;\\n    }\\n}\\n\",\"keccak256\":\"0x302eecd8cf323b4690e3494a7d960b3cbce077032ab8ef655b323cdd136cec58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Packing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Packing.sol)\\n// This file was procedurally generated from scripts/generate/templates/Packing.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library packing and unpacking multiple values into bytesXX.\\n *\\n * Example usage:\\n *\\n * ```solidity\\n * library MyPacker {\\n *     type MyType is bytes32;\\n *\\n *     function _pack(address account, bytes4 selector, uint64 period) external pure returns (MyType) {\\n *         bytes12 subpack = Packing.pack_4_8(selector, bytes8(period));\\n *         bytes32 pack = Packing.pack_20_12(bytes20(account), subpack);\\n *         return MyType.wrap(pack);\\n *     }\\n *\\n *     function _unpack(MyType self) external pure returns (address, bytes4, uint64) {\\n *         bytes32 pack = MyType.unwrap(self);\\n *         return (\\n *             address(Packing.extract_32_20(pack, 0)),\\n *             Packing.extract_32_4(pack, 20),\\n *             uint64(Packing.extract_32_8(pack, 24))\\n *         );\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v5.1._\\n */\\n// solhint-disable func-name-mixedcase\\nlibrary Packing {\\n    error OutOfRangeAccess();\\n\\n    function pack_1_1(bytes1 left, bytes1 right) internal pure returns (bytes2 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(248, not(0)))\\n            right := and(right, shl(248, not(0)))\\n            result := or(left, shr(8, right))\\n        }\\n    }\\n\\n    function pack_2_2(bytes2 left, bytes2 right) internal pure returns (bytes4 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(240, not(0)))\\n            right := and(right, shl(240, not(0)))\\n            result := or(left, shr(16, right))\\n        }\\n    }\\n\\n    function pack_2_4(bytes2 left, bytes4 right) internal pure returns (bytes6 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(240, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(16, right))\\n        }\\n    }\\n\\n    function pack_2_6(bytes2 left, bytes6 right) internal pure returns (bytes8 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(240, not(0)))\\n            right := and(right, shl(208, not(0)))\\n            result := or(left, shr(16, right))\\n        }\\n    }\\n\\n    function pack_2_8(bytes2 left, bytes8 right) internal pure returns (bytes10 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(240, not(0)))\\n            right := and(right, shl(192, not(0)))\\n            result := or(left, shr(16, right))\\n        }\\n    }\\n\\n    function pack_2_10(bytes2 left, bytes10 right) internal pure returns (bytes12 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(240, not(0)))\\n            right := and(right, shl(176, not(0)))\\n            result := or(left, shr(16, right))\\n        }\\n    }\\n\\n    function pack_2_20(bytes2 left, bytes20 right) internal pure returns (bytes22 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(240, not(0)))\\n            right := and(right, shl(96, not(0)))\\n            result := or(left, shr(16, right))\\n        }\\n    }\\n\\n    function pack_2_22(bytes2 left, bytes22 right) internal pure returns (bytes24 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(240, not(0)))\\n            right := and(right, shl(80, not(0)))\\n            result := or(left, shr(16, right))\\n        }\\n    }\\n\\n    function pack_4_2(bytes4 left, bytes2 right) internal pure returns (bytes6 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(240, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_4(bytes4 left, bytes4 right) internal pure returns (bytes8 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_6(bytes4 left, bytes6 right) internal pure returns (bytes10 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(208, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_8(bytes4 left, bytes8 right) internal pure returns (bytes12 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(192, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_12(bytes4 left, bytes12 right) internal pure returns (bytes16 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(160, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_16(bytes4 left, bytes16 right) internal pure returns (bytes20 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(128, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_20(bytes4 left, bytes20 right) internal pure returns (bytes24 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(96, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_24(bytes4 left, bytes24 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(64, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_4_28(bytes4 left, bytes28 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(224, not(0)))\\n            right := and(right, shl(32, not(0)))\\n            result := or(left, shr(32, right))\\n        }\\n    }\\n\\n    function pack_6_2(bytes6 left, bytes2 right) internal pure returns (bytes8 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(208, not(0)))\\n            right := and(right, shl(240, not(0)))\\n            result := or(left, shr(48, right))\\n        }\\n    }\\n\\n    function pack_6_4(bytes6 left, bytes4 right) internal pure returns (bytes10 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(208, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(48, right))\\n        }\\n    }\\n\\n    function pack_6_6(bytes6 left, bytes6 right) internal pure returns (bytes12 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(208, not(0)))\\n            right := and(right, shl(208, not(0)))\\n            result := or(left, shr(48, right))\\n        }\\n    }\\n\\n    function pack_6_10(bytes6 left, bytes10 right) internal pure returns (bytes16 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(208, not(0)))\\n            right := and(right, shl(176, not(0)))\\n            result := or(left, shr(48, right))\\n        }\\n    }\\n\\n    function pack_6_16(bytes6 left, bytes16 right) internal pure returns (bytes22 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(208, not(0)))\\n            right := and(right, shl(128, not(0)))\\n            result := or(left, shr(48, right))\\n        }\\n    }\\n\\n    function pack_6_22(bytes6 left, bytes22 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(208, not(0)))\\n            right := and(right, shl(80, not(0)))\\n            result := or(left, shr(48, right))\\n        }\\n    }\\n\\n    function pack_8_2(bytes8 left, bytes2 right) internal pure returns (bytes10 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(192, not(0)))\\n            right := and(right, shl(240, not(0)))\\n            result := or(left, shr(64, right))\\n        }\\n    }\\n\\n    function pack_8_4(bytes8 left, bytes4 right) internal pure returns (bytes12 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(192, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(64, right))\\n        }\\n    }\\n\\n    function pack_8_8(bytes8 left, bytes8 right) internal pure returns (bytes16 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(192, not(0)))\\n            right := and(right, shl(192, not(0)))\\n            result := or(left, shr(64, right))\\n        }\\n    }\\n\\n    function pack_8_12(bytes8 left, bytes12 right) internal pure returns (bytes20 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(192, not(0)))\\n            right := and(right, shl(160, not(0)))\\n            result := or(left, shr(64, right))\\n        }\\n    }\\n\\n    function pack_8_16(bytes8 left, bytes16 right) internal pure returns (bytes24 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(192, not(0)))\\n            right := and(right, shl(128, not(0)))\\n            result := or(left, shr(64, right))\\n        }\\n    }\\n\\n    function pack_8_20(bytes8 left, bytes20 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(192, not(0)))\\n            right := and(right, shl(96, not(0)))\\n            result := or(left, shr(64, right))\\n        }\\n    }\\n\\n    function pack_8_24(bytes8 left, bytes24 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(192, not(0)))\\n            right := and(right, shl(64, not(0)))\\n            result := or(left, shr(64, right))\\n        }\\n    }\\n\\n    function pack_10_2(bytes10 left, bytes2 right) internal pure returns (bytes12 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(176, not(0)))\\n            right := and(right, shl(240, not(0)))\\n            result := or(left, shr(80, right))\\n        }\\n    }\\n\\n    function pack_10_6(bytes10 left, bytes6 right) internal pure returns (bytes16 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(176, not(0)))\\n            right := and(right, shl(208, not(0)))\\n            result := or(left, shr(80, right))\\n        }\\n    }\\n\\n    function pack_10_10(bytes10 left, bytes10 right) internal pure returns (bytes20 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(176, not(0)))\\n            right := and(right, shl(176, not(0)))\\n            result := or(left, shr(80, right))\\n        }\\n    }\\n\\n    function pack_10_12(bytes10 left, bytes12 right) internal pure returns (bytes22 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(176, not(0)))\\n            right := and(right, shl(160, not(0)))\\n            result := or(left, shr(80, right))\\n        }\\n    }\\n\\n    function pack_10_22(bytes10 left, bytes22 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(176, not(0)))\\n            right := and(right, shl(80, not(0)))\\n            result := or(left, shr(80, right))\\n        }\\n    }\\n\\n    function pack_12_4(bytes12 left, bytes4 right) internal pure returns (bytes16 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(160, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(96, right))\\n        }\\n    }\\n\\n    function pack_12_8(bytes12 left, bytes8 right) internal pure returns (bytes20 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(160, not(0)))\\n            right := and(right, shl(192, not(0)))\\n            result := or(left, shr(96, right))\\n        }\\n    }\\n\\n    function pack_12_10(bytes12 left, bytes10 right) internal pure returns (bytes22 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(160, not(0)))\\n            right := and(right, shl(176, not(0)))\\n            result := or(left, shr(96, right))\\n        }\\n    }\\n\\n    function pack_12_12(bytes12 left, bytes12 right) internal pure returns (bytes24 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(160, not(0)))\\n            right := and(right, shl(160, not(0)))\\n            result := or(left, shr(96, right))\\n        }\\n    }\\n\\n    function pack_12_16(bytes12 left, bytes16 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(160, not(0)))\\n            right := and(right, shl(128, not(0)))\\n            result := or(left, shr(96, right))\\n        }\\n    }\\n\\n    function pack_12_20(bytes12 left, bytes20 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(160, not(0)))\\n            right := and(right, shl(96, not(0)))\\n            result := or(left, shr(96, right))\\n        }\\n    }\\n\\n    function pack_16_4(bytes16 left, bytes4 right) internal pure returns (bytes20 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(128, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(128, right))\\n        }\\n    }\\n\\n    function pack_16_6(bytes16 left, bytes6 right) internal pure returns (bytes22 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(128, not(0)))\\n            right := and(right, shl(208, not(0)))\\n            result := or(left, shr(128, right))\\n        }\\n    }\\n\\n    function pack_16_8(bytes16 left, bytes8 right) internal pure returns (bytes24 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(128, not(0)))\\n            right := and(right, shl(192, not(0)))\\n            result := or(left, shr(128, right))\\n        }\\n    }\\n\\n    function pack_16_12(bytes16 left, bytes12 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(128, not(0)))\\n            right := and(right, shl(160, not(0)))\\n            result := or(left, shr(128, right))\\n        }\\n    }\\n\\n    function pack_16_16(bytes16 left, bytes16 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(128, not(0)))\\n            right := and(right, shl(128, not(0)))\\n            result := or(left, shr(128, right))\\n        }\\n    }\\n\\n    function pack_20_2(bytes20 left, bytes2 right) internal pure returns (bytes22 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(96, not(0)))\\n            right := and(right, shl(240, not(0)))\\n            result := or(left, shr(160, right))\\n        }\\n    }\\n\\n    function pack_20_4(bytes20 left, bytes4 right) internal pure returns (bytes24 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(96, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(160, right))\\n        }\\n    }\\n\\n    function pack_20_8(bytes20 left, bytes8 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(96, not(0)))\\n            right := and(right, shl(192, not(0)))\\n            result := or(left, shr(160, right))\\n        }\\n    }\\n\\n    function pack_20_12(bytes20 left, bytes12 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(96, not(0)))\\n            right := and(right, shl(160, not(0)))\\n            result := or(left, shr(160, right))\\n        }\\n    }\\n\\n    function pack_22_2(bytes22 left, bytes2 right) internal pure returns (bytes24 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(80, not(0)))\\n            right := and(right, shl(240, not(0)))\\n            result := or(left, shr(176, right))\\n        }\\n    }\\n\\n    function pack_22_6(bytes22 left, bytes6 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(80, not(0)))\\n            right := and(right, shl(208, not(0)))\\n            result := or(left, shr(176, right))\\n        }\\n    }\\n\\n    function pack_22_10(bytes22 left, bytes10 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(80, not(0)))\\n            right := and(right, shl(176, not(0)))\\n            result := or(left, shr(176, right))\\n        }\\n    }\\n\\n    function pack_24_4(bytes24 left, bytes4 right) internal pure returns (bytes28 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(64, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(192, right))\\n        }\\n    }\\n\\n    function pack_24_8(bytes24 left, bytes8 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(64, not(0)))\\n            right := and(right, shl(192, not(0)))\\n            result := or(left, shr(192, right))\\n        }\\n    }\\n\\n    function pack_28_4(bytes28 left, bytes4 right) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            left := and(left, shl(32, not(0)))\\n            right := and(right, shl(224, not(0)))\\n            result := or(left, shr(224, right))\\n        }\\n    }\\n\\n    function extract_2_1(bytes2 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 1) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_2_1(bytes2 self, bytes1 value, uint8 offset) internal pure returns (bytes2 result) {\\n        bytes1 oldValue = extract_2_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_4_1(bytes4 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 3) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_4_1(bytes4 self, bytes1 value, uint8 offset) internal pure returns (bytes4 result) {\\n        bytes1 oldValue = extract_4_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_4_2(bytes4 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 2) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_4_2(bytes4 self, bytes2 value, uint8 offset) internal pure returns (bytes4 result) {\\n        bytes2 oldValue = extract_4_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_6_1(bytes6 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 5) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_6_1(bytes6 self, bytes1 value, uint8 offset) internal pure returns (bytes6 result) {\\n        bytes1 oldValue = extract_6_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_6_2(bytes6 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_6_2(bytes6 self, bytes2 value, uint8 offset) internal pure returns (bytes6 result) {\\n        bytes2 oldValue = extract_6_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_6_4(bytes6 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 2) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_6_4(bytes6 self, bytes4 value, uint8 offset) internal pure returns (bytes6 result) {\\n        bytes4 oldValue = extract_6_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_8_1(bytes8 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 7) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_8_1(bytes8 self, bytes1 value, uint8 offset) internal pure returns (bytes8 result) {\\n        bytes1 oldValue = extract_8_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_8_2(bytes8 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 6) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_8_2(bytes8 self, bytes2 value, uint8 offset) internal pure returns (bytes8 result) {\\n        bytes2 oldValue = extract_8_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_8_4(bytes8 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_8_4(bytes8 self, bytes4 value, uint8 offset) internal pure returns (bytes8 result) {\\n        bytes4 oldValue = extract_8_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_8_6(bytes8 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 2) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_8_6(bytes8 self, bytes6 value, uint8 offset) internal pure returns (bytes8 result) {\\n        bytes6 oldValue = extract_8_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_10_1(bytes10 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 9) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_10_1(bytes10 self, bytes1 value, uint8 offset) internal pure returns (bytes10 result) {\\n        bytes1 oldValue = extract_10_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_10_2(bytes10 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 8) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_10_2(bytes10 self, bytes2 value, uint8 offset) internal pure returns (bytes10 result) {\\n        bytes2 oldValue = extract_10_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_10_4(bytes10 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 6) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_10_4(bytes10 self, bytes4 value, uint8 offset) internal pure returns (bytes10 result) {\\n        bytes4 oldValue = extract_10_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_10_6(bytes10 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_10_6(bytes10 self, bytes6 value, uint8 offset) internal pure returns (bytes10 result) {\\n        bytes6 oldValue = extract_10_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_10_8(bytes10 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 2) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_10_8(bytes10 self, bytes8 value, uint8 offset) internal pure returns (bytes10 result) {\\n        bytes8 oldValue = extract_10_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_12_1(bytes12 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 11) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_12_1(bytes12 self, bytes1 value, uint8 offset) internal pure returns (bytes12 result) {\\n        bytes1 oldValue = extract_12_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_12_2(bytes12 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 10) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_12_2(bytes12 self, bytes2 value, uint8 offset) internal pure returns (bytes12 result) {\\n        bytes2 oldValue = extract_12_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_12_4(bytes12 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 8) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_12_4(bytes12 self, bytes4 value, uint8 offset) internal pure returns (bytes12 result) {\\n        bytes4 oldValue = extract_12_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_12_6(bytes12 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 6) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_12_6(bytes12 self, bytes6 value, uint8 offset) internal pure returns (bytes12 result) {\\n        bytes6 oldValue = extract_12_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_12_8(bytes12 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_12_8(bytes12 self, bytes8 value, uint8 offset) internal pure returns (bytes12 result) {\\n        bytes8 oldValue = extract_12_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_12_10(bytes12 self, uint8 offset) internal pure returns (bytes10 result) {\\n        if (offset > 2) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(176, not(0)))\\n        }\\n    }\\n\\n    function replace_12_10(bytes12 self, bytes10 value, uint8 offset) internal pure returns (bytes12 result) {\\n        bytes10 oldValue = extract_12_10(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(176, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_16_1(bytes16 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 15) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_16_1(bytes16 self, bytes1 value, uint8 offset) internal pure returns (bytes16 result) {\\n        bytes1 oldValue = extract_16_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_16_2(bytes16 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 14) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_16_2(bytes16 self, bytes2 value, uint8 offset) internal pure returns (bytes16 result) {\\n        bytes2 oldValue = extract_16_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_16_4(bytes16 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 12) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_16_4(bytes16 self, bytes4 value, uint8 offset) internal pure returns (bytes16 result) {\\n        bytes4 oldValue = extract_16_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_16_6(bytes16 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 10) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_16_6(bytes16 self, bytes6 value, uint8 offset) internal pure returns (bytes16 result) {\\n        bytes6 oldValue = extract_16_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_16_8(bytes16 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 8) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_16_8(bytes16 self, bytes8 value, uint8 offset) internal pure returns (bytes16 result) {\\n        bytes8 oldValue = extract_16_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_16_10(bytes16 self, uint8 offset) internal pure returns (bytes10 result) {\\n        if (offset > 6) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(176, not(0)))\\n        }\\n    }\\n\\n    function replace_16_10(bytes16 self, bytes10 value, uint8 offset) internal pure returns (bytes16 result) {\\n        bytes10 oldValue = extract_16_10(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(176, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_16_12(bytes16 self, uint8 offset) internal pure returns (bytes12 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\\n        }\\n    }\\n\\n    function replace_16_12(bytes16 self, bytes12 value, uint8 offset) internal pure returns (bytes16 result) {\\n        bytes12 oldValue = extract_16_12(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(160, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_1(bytes20 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 19) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_20_1(bytes20 self, bytes1 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes1 oldValue = extract_20_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_2(bytes20 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 18) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_20_2(bytes20 self, bytes2 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes2 oldValue = extract_20_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_4(bytes20 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 16) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_20_4(bytes20 self, bytes4 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes4 oldValue = extract_20_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_6(bytes20 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 14) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_20_6(bytes20 self, bytes6 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes6 oldValue = extract_20_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_8(bytes20 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 12) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_20_8(bytes20 self, bytes8 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes8 oldValue = extract_20_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_10(bytes20 self, uint8 offset) internal pure returns (bytes10 result) {\\n        if (offset > 10) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(176, not(0)))\\n        }\\n    }\\n\\n    function replace_20_10(bytes20 self, bytes10 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes10 oldValue = extract_20_10(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(176, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_12(bytes20 self, uint8 offset) internal pure returns (bytes12 result) {\\n        if (offset > 8) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\\n        }\\n    }\\n\\n    function replace_20_12(bytes20 self, bytes12 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes12 oldValue = extract_20_12(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(160, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_20_16(bytes20 self, uint8 offset) internal pure returns (bytes16 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\\n        }\\n    }\\n\\n    function replace_20_16(bytes20 self, bytes16 value, uint8 offset) internal pure returns (bytes20 result) {\\n        bytes16 oldValue = extract_20_16(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(128, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_1(bytes22 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 21) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_22_1(bytes22 self, bytes1 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes1 oldValue = extract_22_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_2(bytes22 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 20) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_22_2(bytes22 self, bytes2 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes2 oldValue = extract_22_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_4(bytes22 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 18) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_22_4(bytes22 self, bytes4 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes4 oldValue = extract_22_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_6(bytes22 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 16) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_22_6(bytes22 self, bytes6 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes6 oldValue = extract_22_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_8(bytes22 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 14) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_22_8(bytes22 self, bytes8 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes8 oldValue = extract_22_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_10(bytes22 self, uint8 offset) internal pure returns (bytes10 result) {\\n        if (offset > 12) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(176, not(0)))\\n        }\\n    }\\n\\n    function replace_22_10(bytes22 self, bytes10 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes10 oldValue = extract_22_10(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(176, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_12(bytes22 self, uint8 offset) internal pure returns (bytes12 result) {\\n        if (offset > 10) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\\n        }\\n    }\\n\\n    function replace_22_12(bytes22 self, bytes12 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes12 oldValue = extract_22_12(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(160, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_16(bytes22 self, uint8 offset) internal pure returns (bytes16 result) {\\n        if (offset > 6) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\\n        }\\n    }\\n\\n    function replace_22_16(bytes22 self, bytes16 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes16 oldValue = extract_22_16(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(128, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_22_20(bytes22 self, uint8 offset) internal pure returns (bytes20 result) {\\n        if (offset > 2) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(96, not(0)))\\n        }\\n    }\\n\\n    function replace_22_20(bytes22 self, bytes20 value, uint8 offset) internal pure returns (bytes22 result) {\\n        bytes20 oldValue = extract_22_20(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(96, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_1(bytes24 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 23) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_24_1(bytes24 self, bytes1 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes1 oldValue = extract_24_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_2(bytes24 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 22) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_24_2(bytes24 self, bytes2 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes2 oldValue = extract_24_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_4(bytes24 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 20) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_24_4(bytes24 self, bytes4 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes4 oldValue = extract_24_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_6(bytes24 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 18) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_24_6(bytes24 self, bytes6 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes6 oldValue = extract_24_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_8(bytes24 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 16) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_24_8(bytes24 self, bytes8 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes8 oldValue = extract_24_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_10(bytes24 self, uint8 offset) internal pure returns (bytes10 result) {\\n        if (offset > 14) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(176, not(0)))\\n        }\\n    }\\n\\n    function replace_24_10(bytes24 self, bytes10 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes10 oldValue = extract_24_10(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(176, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_12(bytes24 self, uint8 offset) internal pure returns (bytes12 result) {\\n        if (offset > 12) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\\n        }\\n    }\\n\\n    function replace_24_12(bytes24 self, bytes12 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes12 oldValue = extract_24_12(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(160, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_16(bytes24 self, uint8 offset) internal pure returns (bytes16 result) {\\n        if (offset > 8) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\\n        }\\n    }\\n\\n    function replace_24_16(bytes24 self, bytes16 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes16 oldValue = extract_24_16(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(128, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_20(bytes24 self, uint8 offset) internal pure returns (bytes20 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(96, not(0)))\\n        }\\n    }\\n\\n    function replace_24_20(bytes24 self, bytes20 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes20 oldValue = extract_24_20(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(96, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_24_22(bytes24 self, uint8 offset) internal pure returns (bytes22 result) {\\n        if (offset > 2) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(80, not(0)))\\n        }\\n    }\\n\\n    function replace_24_22(bytes24 self, bytes22 value, uint8 offset) internal pure returns (bytes24 result) {\\n        bytes22 oldValue = extract_24_22(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(80, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_1(bytes28 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 27) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_28_1(bytes28 self, bytes1 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes1 oldValue = extract_28_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_2(bytes28 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 26) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_28_2(bytes28 self, bytes2 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes2 oldValue = extract_28_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_4(bytes28 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 24) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_28_4(bytes28 self, bytes4 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes4 oldValue = extract_28_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_6(bytes28 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 22) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_28_6(bytes28 self, bytes6 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes6 oldValue = extract_28_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_8(bytes28 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 20) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_28_8(bytes28 self, bytes8 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes8 oldValue = extract_28_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_10(bytes28 self, uint8 offset) internal pure returns (bytes10 result) {\\n        if (offset > 18) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(176, not(0)))\\n        }\\n    }\\n\\n    function replace_28_10(bytes28 self, bytes10 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes10 oldValue = extract_28_10(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(176, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_12(bytes28 self, uint8 offset) internal pure returns (bytes12 result) {\\n        if (offset > 16) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\\n        }\\n    }\\n\\n    function replace_28_12(bytes28 self, bytes12 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes12 oldValue = extract_28_12(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(160, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_16(bytes28 self, uint8 offset) internal pure returns (bytes16 result) {\\n        if (offset > 12) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\\n        }\\n    }\\n\\n    function replace_28_16(bytes28 self, bytes16 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes16 oldValue = extract_28_16(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(128, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_20(bytes28 self, uint8 offset) internal pure returns (bytes20 result) {\\n        if (offset > 8) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(96, not(0)))\\n        }\\n    }\\n\\n    function replace_28_20(bytes28 self, bytes20 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes20 oldValue = extract_28_20(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(96, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_22(bytes28 self, uint8 offset) internal pure returns (bytes22 result) {\\n        if (offset > 6) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(80, not(0)))\\n        }\\n    }\\n\\n    function replace_28_22(bytes28 self, bytes22 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes22 oldValue = extract_28_22(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(80, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_28_24(bytes28 self, uint8 offset) internal pure returns (bytes24 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(64, not(0)))\\n        }\\n    }\\n\\n    function replace_28_24(bytes28 self, bytes24 value, uint8 offset) internal pure returns (bytes28 result) {\\n        bytes24 oldValue = extract_28_24(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(64, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_1(bytes32 self, uint8 offset) internal pure returns (bytes1 result) {\\n        if (offset > 31) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(248, not(0)))\\n        }\\n    }\\n\\n    function replace_32_1(bytes32 self, bytes1 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes1 oldValue = extract_32_1(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(248, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_2(bytes32 self, uint8 offset) internal pure returns (bytes2 result) {\\n        if (offset > 30) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(240, not(0)))\\n        }\\n    }\\n\\n    function replace_32_2(bytes32 self, bytes2 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes2 oldValue = extract_32_2(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(240, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_4(bytes32 self, uint8 offset) internal pure returns (bytes4 result) {\\n        if (offset > 28) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(224, not(0)))\\n        }\\n    }\\n\\n    function replace_32_4(bytes32 self, bytes4 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes4 oldValue = extract_32_4(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(224, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_6(bytes32 self, uint8 offset) internal pure returns (bytes6 result) {\\n        if (offset > 26) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(208, not(0)))\\n        }\\n    }\\n\\n    function replace_32_6(bytes32 self, bytes6 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes6 oldValue = extract_32_6(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(208, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_8(bytes32 self, uint8 offset) internal pure returns (bytes8 result) {\\n        if (offset > 24) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(192, not(0)))\\n        }\\n    }\\n\\n    function replace_32_8(bytes32 self, bytes8 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes8 oldValue = extract_32_8(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(192, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_10(bytes32 self, uint8 offset) internal pure returns (bytes10 result) {\\n        if (offset > 22) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(176, not(0)))\\n        }\\n    }\\n\\n    function replace_32_10(bytes32 self, bytes10 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes10 oldValue = extract_32_10(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(176, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_12(bytes32 self, uint8 offset) internal pure returns (bytes12 result) {\\n        if (offset > 20) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(160, not(0)))\\n        }\\n    }\\n\\n    function replace_32_12(bytes32 self, bytes12 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes12 oldValue = extract_32_12(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(160, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_16(bytes32 self, uint8 offset) internal pure returns (bytes16 result) {\\n        if (offset > 16) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(128, not(0)))\\n        }\\n    }\\n\\n    function replace_32_16(bytes32 self, bytes16 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes16 oldValue = extract_32_16(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(128, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_20(bytes32 self, uint8 offset) internal pure returns (bytes20 result) {\\n        if (offset > 12) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(96, not(0)))\\n        }\\n    }\\n\\n    function replace_32_20(bytes32 self, bytes20 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes20 oldValue = extract_32_20(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(96, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_22(bytes32 self, uint8 offset) internal pure returns (bytes22 result) {\\n        if (offset > 10) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(80, not(0)))\\n        }\\n    }\\n\\n    function replace_32_22(bytes32 self, bytes22 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes22 oldValue = extract_32_22(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(80, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_24(bytes32 self, uint8 offset) internal pure returns (bytes24 result) {\\n        if (offset > 8) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(64, not(0)))\\n        }\\n    }\\n\\n    function replace_32_24(bytes32 self, bytes24 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes24 oldValue = extract_32_24(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(64, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n\\n    function extract_32_28(bytes32 self, uint8 offset) internal pure returns (bytes28 result) {\\n        if (offset > 4) revert OutOfRangeAccess();\\n        assembly (\\\"memory-safe\\\") {\\n            result := and(shl(mul(8, offset), self), shl(32, not(0)))\\n        }\\n    }\\n\\n    function replace_32_28(bytes32 self, bytes28 value, uint8 offset) internal pure returns (bytes32 result) {\\n        bytes28 oldValue = extract_32_28(self, offset);\\n        assembly (\\\"memory-safe\\\") {\\n            value := and(value, shl(32, not(0)))\\n            result := xor(self, shr(mul(8, offset), xor(oldValue, value)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea9f5d3cdd11b7af7d8662a5c0e952f3666145cb4c9fe1452bd15c30abc462dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {toShortStringWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {toShortStringWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f0996b7af53529d4faa3079f77e1e0d1bffc2e4a7c6c12b381f80fb7e5b8fbb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SlotDerivation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/SlotDerivation.sol)\\n// This file was procedurally generated from scripts/generate/templates/SlotDerivation.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for computing storage (and transient storage) locations from namespaces and deriving slots\\n * corresponding to standard patterns. The derivation method for array and mapping matches the storage layout used by\\n * the solidity language / compiler.\\n *\\n * See https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays[Solidity docs for mappings and dynamic arrays.].\\n *\\n * Example usage:\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using StorageSlot for bytes32;\\n *     using SlotDerivation for bytes32;\\n *\\n *     // Declare a namespace\\n *     string private constant _NAMESPACE = \\\"<namespace>\\\"; // eg. OpenZeppelin.Slot\\n *\\n *     function setValueInNamespace(uint256 key, address newValue) internal {\\n *         _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value = newValue;\\n *     }\\n *\\n *     function getValueInNamespace(uint256 key) internal view returns (address) {\\n *         return _NAMESPACE.erc7201Slot().deriveMapping(key).getAddressSlot().value;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {StorageSlot}.\\n *\\n * NOTE: This library provides a way to manipulate storage locations in a non-standard way. Tooling for checking\\n * upgrade safety will ignore the slots accessed through this library.\\n *\\n * _Available since v5.1._\\n */\\nlibrary SlotDerivation {\\n    /**\\n     * @dev Derive an ERC-7201 slot from a string (namespace).\\n     */\\n    function erc7201Slot(string memory namespace) internal pure returns (bytes32 slot) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, sub(keccak256(add(namespace, 0x20), mload(namespace)), 1))\\n            slot := and(keccak256(0x00, 0x20), not(0xff))\\n        }\\n    }\\n\\n    /**\\n     * @dev Add an offset to a slot to get the n-th element of a structure or an array.\\n     */\\n    function offset(bytes32 slot, uint256 pos) internal pure returns (bytes32 result) {\\n        unchecked {\\n            return bytes32(uint256(slot) + pos);\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of the first element in an array from the slot where the length is stored.\\n     */\\n    function deriveArray(bytes32 slot) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, slot)\\n            result := keccak256(0x00, 0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, address key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, and(key, shr(96, not(0))))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bool key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, iszero(iszero(key)))\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes32 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, uint256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, int256 key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, key)\\n            mstore(0x20, slot)\\n            result := keccak256(0x00, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, string memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n\\n    /**\\n     * @dev Derive the location of a mapping element from the key.\\n     */\\n    function deriveMapping(bytes32 slot, bytes memory key) internal pure returns (bytes32 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            let length := mload(key)\\n            let begin := add(key, 0x20)\\n            let end := add(begin, length)\\n            let cache := mload(end)\\n            mstore(end, slot)\\n            result := keccak256(begin, add(length, 0x20))\\n            mstore(end, cache)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad2585d7c6b09cb3d0af63f5582c5a87fdf60c490d6223612d211d75e101e8c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x551724f56f730de49862be7c1ee92dc0e00b2faa13eae21dc3e41e3408259117\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    // slither-disable-next-line constable-states\\n    string private _nameFallback;\\n    // slither-disable-next-line constable-states\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC5267\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x8747ad06cd88c58d48fc8b2441afafc9550695d953838242c3451fca6daab1b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Variant of {toDataWithIntendedValidatorHash-address-bytes} optimized for cases where `data` is a bytes32.\\n     */\\n    function toDataWithIntendedValidatorHash(\\n        address validator,\\n        bytes32 messageHash\\n    ) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, hex\\\"19_00\\\")\\n            mstore(0x02, shl(96, validator))\\n            mstore(0x16, messageHash)\\n            digest := keccak256(0x00, 0x36)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa40a5c779555de078dc9f3434d5bac070aad1df9297e04b09a0afc42da38e84c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x66821fd873f33bfb4d878a7bff9d9a5655074391a726e39b14be496591e016aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0-rc.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Arrays} from \\\"../Arrays.sol\\\";\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n * - Set can be cleared (all elements removed) in O(n).\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function _clear(Set storage set) private {\\n        uint256 len = _length(set);\\n        for (uint256 i = 0; i < len; ++i) {\\n            delete set._positions[set._values[i]];\\n        }\\n        Arrays.unsafeSetLength(set._values, 0);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(Bytes32Set storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(AddressSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes all the values from a set. O(n).\\n     *\\n     * WARNING: Developers should keep in mind that this function has an unbounded cost and using it may render the\\n     * function uncallable if the set grows to the point where clearing it consumes too much gas to fit in a block.\\n     */\\n    function clear(UintSet storage set) internal {\\n        _clear(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0741a2e232040cf2ba8bfe657b979ba577dea2b9f5cae5a770420d25fceb51f9\",\"license\":\"MIT\"},\"contracts/ModularAccount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccountERC7579} from \\\"@openzeppelin/community-contracts/contracts/account/extensions/AccountERC7579.sol\\\";\\nimport {AbstractSigner} from \\\"@openzeppelin/community-contracts/contracts/utils/cryptography/AbstractSigner.sol\\\";\\nimport {SignerERC7702} from \\\"@openzeppelin/community-contracts/contracts/utils/cryptography/SignerERC7702.sol\\\";\\nimport {ERC7739} from \\\"@openzeppelin/community-contracts/contracts/utils/cryptography/ERC7739.sol\\\";\\nimport {AccountCore} from \\\"@openzeppelin/community-contracts/contracts/account/AccountCore.sol\\\";\\nimport {PackedUserOperation} from \\\"@openzeppelin/contracts/interfaces/draft-IERC4337.sol\\\";\\nimport {Account} from \\\"@openzeppelin/community-contracts/contracts/account/Account.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n// Acknowledgements:\\n// Source code extracted from OpenZeppelin: https://github.com/OpenZeppelin/openzeppelin-community-contracts\\n//\\ncontract ModularAccount is Account, AccountERC7579, SignerERC7702 {\\n    constructor() EIP712(\\\"ModularAccount\\\", \\\"1\\\") {}\\n\\n    function _validateUserOp(\\n        PackedUserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal virtual override(AccountCore, AccountERC7579) returns (uint256) {\\n        return super._validateUserOp(userOp, userOpHash);\\n    }\\n\\n    /// @dev Resolve implementation of ERC-1271 by both ERC7739 and AccountERC7579 to support both schemes.\\n    function isValidSignature(\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) public view virtual override(ERC7739, AccountERC7579) returns (bytes4) {\\n        // ERC-7739 can return the fn selector (success), 0xffffffff (invalid) or 0x77390001 (detection).\\n        // If the return is 0xffffffff, we fallback to validation using ERC-7579 modules.\\n        bytes4 erc7739magic = ERC7739.isValidSignature(hash, signature);\\n        return\\n            erc7739magic == bytes4(0xffffffff)\\n                ? AccountERC7579.isValidSignature(hash, signature)\\n                : erc7739magic;\\n    }\\n\\n    /// @dev Enable signature using the ERC-7702 signer.\\n    function _rawSignatureValidation(\\n        bytes32 hash,\\n        bytes calldata signature\\n    )\\n        internal\\n        view\\n        virtual\\n        override(AbstractSigner, AccountERC7579, SignerERC7702)\\n        returns (bool)\\n    {\\n        return SignerERC7702._rawSignatureValidation(hash, signature);\\n    }\\n\\n    function getNumber() public pure returns (uint256) {\\n        return 1;\\n    }\\n}\\n\",\"keccak256\":\"0xce0fe9767e3fdf656ef60bd8552740132d2ed0faa61cfce8a61f8ea0cb7d102a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052348015610010575f5ffd5b50604080518082018252600e81526d135bd91d5b185c9058d8dbdd5b9d60921b602080830191909152825180840190935260018352603160f81b9083015290610059825f610102565b61012052610068816001610102565b61014052815160208084019190912060e052815190820120610100524660a0526100f460e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052610324565b5f60208351101561011d5761011683610134565b905061012e565b816101288482610212565b5060ff90505b92915050565b5f5f829050601f81511115610167578260405163305a27a960e01b815260040161015e91906102cc565b60405180910390fd5b805161017282610301565b179392505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806101a257607f821691505b6020821081036101c057634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561020d57805f5260205f20601f840160051c810160208510156101eb5750805b601f840160051c820191505b8181101561020a575f81556001016101f7565b50505b505050565b81516001600160401b0381111561022b5761022b61017a565b61023f81610239845461018e565b846101c6565b6020601f821160018114610271575f831561025a5750848201515b5f19600385901b1c1916600184901b17845561020a565b5f84815260208120601f198516915b828110156102a05787850151825560209485019460019092019101610280565b50848210156102bd57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156101c0575f1960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051612f186103755f395f610ab101525f610a8501525f61187f01525f61185701525f6117b201525f6117dc01525f6118060152612f185ff3fe608060405260043610610117575f3560e01c8063a71763a81161009f578063d691c96411610063578063d691c96414610347578063e9ae5c5314610367578063f23a6e611461037a578063f2c9ecd8146103a5578063f2dc691d146103b85761011e565b8063a71763a8146102a0578063b0d691fe146102bf578063bc197c81146102e9578063d03c791414610314578063d087d288146103335761011e565b806319822f7c116100e657806319822f7c146101eb5780633e1b08121461021857806384b0196e146102375780639517e29f1461025e5780639cfd7cff1461027f5761011e565b806301ffc9a714610136578063112d3a7d1461016a578063150b7a02146101895780631626ba7e146101cc5761011e565b3661011e57005b5f36606061012a6103d7565b80519350602001915050f35b348015610141575f5ffd5b506101556101503660046123e5565b6104cb565b60405190151581526020015b60405180910390f35b348015610175575f5ffd5b5061015561018436600461245f565b610501565b348015610194575f5ffd5b506101b36101a3366004612563565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610161565b3480156101d7575f5ffd5b506101b36101e63660046125c6565b6105b4565b3480156101f6575f5ffd5b5061020a61020536600461260d565b6105f0565b604051908152602001610161565b348015610223575f5ffd5b5061020a61023236600461265b565b61060f565b348015610242575f5ffd5b5061024b610698565b60405161016197969594939291906126af565b348015610269575f5ffd5b5061027d61027836600461245f565b6106da565b005b34801561028a575f5ffd5b50610293610728565b6040516101619190612745565b3480156102ab575f5ffd5b5061027d6102ba36600461245f565b610748565b3480156102ca575f5ffd5b506040516f71727de22e5e9d8baf0edac6f37da0328152602001610161565b3480156102f4575f5ffd5b506101b36103033660046127cc565b63bc197c8160e01b95945050505050565b34801561031f575f5ffd5b5061015561032e366004612878565b610790565b34801561033e575f5ffd5b5061020a610800565b61035a6103553660046125c6565b61080f565b604051610161919061288f565b61027d6103753660046125c6565b610839565b348015610385575f5ffd5b506101b36103943660046128f2565b63f23a6e6160e01b95945050505050565b3480156103b0575f5ffd5b50600161020a565b3480156103c3575f5ffd5b506101556103d2366004612878565b61084c565b60605f6103ee5f356001600160e01b031916610869565b90506001600160e01b03195f35166001600160a01b0382166104355760405163af5a720360e01b81526001600160e01b031990911660048201526024015b60405180910390fd5b505f5f826001600160a01b0316345f363360405160200161045893929190612945565b60408051601f19818403018152908290526104729161297d565b5f6040518083038185875af1925050503d805f81146104ac576040519150601f19603f3d011682016040523d82523d5f602084013e6104b1565b606091505b509150915081156104c3579392505050565b805160208201fd5b5f6001600160e01b03198216630271189760e51b14806104fb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b5f6001850361052c576001600160a01b0384165f9081526003602052604090205415155b90506105ac565b60028503610553576001600160a01b0384165f908152600560205260409020541515610525565b600385036105a9576001600160a01b03841660065f6105756004828789612988565b61057e916129af565b6001600160e01b031916815260208101919091526040015f20546001600160a01b03161490506105ac565b505f5b949350505050565b5f5f6105c185858561088d565b90506001600160e01b0319808216146105da57806105e5565b6105e585858561090a565b9150505b9392505050565b5f6105f96109e3565b5f6106048585610a22565b90506105ac83610a2d565b5f6f71727de22e5e9d8baf0edac6f37da032604051631aab3f0d60e11b81523060048201526001600160c01b03841660248201526001600160a01b0391909116906335567e1a90604401602060405180830381865afa158015610674573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104fb91906129e5565b5f6060805f5f5f60606106a9610a7e565b6106b1610aaa565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6106e2610ad7565b610722848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610b2a92505050565b50505050565b6060604051806060016040528060378152602001612eac60379139905090565b610750610ad7565b610722848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610d9492505050565b5f5f5f61079c84610f2e565b5050915091506107af825f60f81b610f6c565b806107c357506107c382600160f81b610f6c565b806107db57506107db826001600160f81b0319610f6c565b80156105ac57506107ec815f610f6c565b806105ac57506105ac81600160f81b610f6c565b5f61080a5f61060f565b905090565b606060025f8061082183338484610f7e565b61082c878787610fc5565b93505b5050509392505050565b610841610ad7565b610722838383610fc5565b5f600182148061085c5750600282145b806104fb57505060031490565b6001600160e01b0319165f908152600660205260409020546001600160a01b031690565b5f610899848484611063565b806108aa57506108aa84848461114f565b6108fa577f7739773977397739773977397739773977397739773977397739773977397739841480156108db575081155b6108ed576001600160e01b03196105ac565b637739000160e01b6105ac565b630b135d3f60e11b949350505050565b5f601482106109d2575f365f61092086866111c1565b919450925090506109346001845f80610501565b156109ce57604051637aa8f17760e11b81526001600160a01b0384169063f551e2ee9061096b9030908b9087908790600401612a24565b602060405180830381865afa9250505080156109a4575060408051601f3d908101601f191682019092526109a191810190612a4b565b60015b156109ce576374eca2c160e11b6001600160e01b03198216016109cc5793506105e992505050565b505b5050505b506001600160e01b03199392505050565b336f71727de22e5e9d8baf0edac6f37da0328114610a1f57604051637cf8632b60e01b81526001600160a01b038216600482015260240161042c565b50565b5f6105e983836111f8565b8015610a1f576040515f90339083908381818185875af1925050503d805f8114610a72576040519150601f19603f3d011682016040523d82523d5f602084013e610a77565b606091505b5050505050565b606061080a7f00000000000000000000000000000000000000000000000000000000000000005f61129c565b606061080a7f0000000000000000000000000000000000000000000000000000000000000000600161129c565b33308114801590610b0157506001600160a01b0381166f71727de22e5e9d8baf0edac6f37da03214155b15610a1f57604051637cf8632b60e01b81526001600160a01b038216600482015260240161042c565b610b338361084c565b8390610b55576040516360fa2b2360e01b815260040161042c91815260200190565b5060405163ecd0596160e01b8152600481018490526001600160a01b0383169063ecd0596190602401602060405180830381865afa158015610b99573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bbd9190612a66565b83839091610bf057604051638f89476f60e01b815260048101929092526001600160a01b0316602482015260440161042c565b505060018303610c3f57610c05600283611345565b83839091610c38576040516395d48a5b60e01b815260048101929092526001600160a01b0316602482015260440161042c565b5050610cf3565b60028303610c5257610c05600483611345565b60038303610cf3575f610c6482611359565b6001600160e01b031982165f90815260066020526040902054909350909150849084906001600160a01b031615610cc0576040516395d48a5b60e01b815260048101929092526001600160a01b0316602482015260440161042c565b50506001600160e01b0319165f90815260066020526040902080546001600160a01b0319166001600160a01b0384161790555b6040516306d61fe760e41b81526001600160a01b03831690636d61fe7090610d1f908490600401612745565b5f604051808303815f87803b158015610d36575f5ffd5b505af1158015610d48573d5f5f3e3d5ffd5b5050604080518681526001600160a01b03861660208201527fd21d0b289f126c4b473ea641963e766833c2f13866e4ff480abd787c100ef12393500190505b60405180910390a1505050565b60018303610de157610da7600283611379565b83839091610dda57604051631343d68d60e01b815260048101929092526001600160a01b0316602482015260440161042c565b5050610e96565b60028303610df457610da7600483611379565b60038303610e96575f610e0682611359565b925090506001600160a01b038316610e1d82610869565b6001600160a01b0316148015610e3b57506001600160a01b03831615155b84849091610e6e57604051631343d68d60e01b815260048101929092526001600160a01b0316602482015260440161042c565b50506001600160e01b0319165f90815260066020526040902080546001600160a01b03191690555b604051638a91b0e360e01b81526001600160a01b03831690638a91b0e390610ec2908490600401612745565b5f604051808303815f87803b158015610ed9575f5ffd5b505af1158015610eeb573d5f5f3e3d5ffd5b5050604080518681526001600160a01b03861660208201527f341347516a9de374859dfda710fa4828b2d48cb57d4fbe4c1149612b8e02276e9350019050610d87565b5f5f5f5f610f3c855f61138d565b610f4786600161138d565b610f528760066113c5565b610f5d88600a6113fd565b93509350935093509193509193565b6001600160f81b031990811691161490565b610f8a84848484610501565b84849091610fbd57604051631343d68d60e01b815260048101929092526001600160a01b0316602482015260440161042c565b505050505050565b60605f5f610fd286610f2e565b505091509150610fe5825f60f81b610f6c565b15610ffe57610ff5858583611438565b925050506105e9565b61100c82600160f81b610f6c565b1561101c57610ff58585836114b4565b61102e826001600160f81b0319610f6c565b1561103e57610ff58585836115da565b6040516358df354b60e11b81526001600160f81b03198316600482015260240161042c565b5f365f5f5f365f6110748989611650565b9550955095509550955095505f5f5f5f5f61108d610698565b5095509550955095509550506110ac888a61174990919063ffffffff16565b8f1480156110b957508515155b801561113c575061113c61113561112e89898c8a805190602001208a805190602001208a8a8a60405160200161111a959493929190948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b604051602081830303815290604052611768565b8b90611749565b8c8c61179a565b9f9e505050505050505050505050505050565b5f6105ac6111ba6111ac86604080517f983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de60208201529081018290525f90606001604051602081830303815290604052805190602001209050919050565b6111b46117a6565b90611749565b848461179a565b5f36816111d16014828688612988565b6111da91612a85565b60601c6111ea8560148189612988565b9250925092505b9250925092565b5f5f611203846118cf565b90506112126001825f80610501565b6112255761122084846118e7565b6105ac565b806001600160a01b031663970032038561123f878761191b565b6040518363ffffffff1660e01b815260040161125c929190612afc565b6020604051808303815f875af1158015611278573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ac91906129e5565b606060ff83146112b6576112af83611a38565b90506104fb565b8180546112c290612bff565b80601f01602080910402602001604051908101604052809291908181526020018280546112ee90612bff565b80156113395780601f1061131057610100808354040283529160200191611339565b820191905f5260205f20905b81548152906001019060200180831161131c57829003601f168201915b505050505090506104fb565b5f6105e9836001600160a01b038416611a75565b5f606061136583612c37565b611370846004611ac1565b91509150915091565b5f6105e9836001600160a01b038416611acf565b5f601f8260ff1611156113b357604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b6001600160f81b03191690565b5f601c8260ff1611156113eb57604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b6001600160e01b03191690565b5f600a8260ff16111561142357604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b69ffffffffffffffffffff191690565b60605f5f365f6114488888611bb9565b6040805160018082528183019092529498509296509094509250816020015b606081526020019060019003908161146757905050945061148c5f8786868686611c09565b855f8151811061149e5761149e612c75565b6020026020010181905250505050509392505050565b6060365f6114c28686611c78565b9092509050806001600160401b038111156114df576114df6124b4565b60405190808252806020026020018201604052801561151257816020015b60608152602001906001900390816114fd5790505b5092505f5b8181101561082f576115b5818685858581811061153657611536612c75565b90506020028101906115489190612c89565b611556906020810190612ca7565b86868681811061156857611568612c75565b905060200281019061157a9190612c89565b6020013587878781811061159057611590612c75565b90506020028101906115a29190612c89565b6115b0906040810190612cc0565b611c09565b8482815181106115c7576115c7612c75565b6020908102919091010152600101611517565b60605f365f6115e98787611d3d565b6040805160018082528183019092529396509194509250816020015b60608152602001906001900390816116055790505093506116295f86858585611d73565b845f8151811061163b5761163b612c75565b60200260200101819052505050509392505050565b365f8080838186600481101561167857505f955085945084935083925082915081905061173f565b60011981015f61168a8a83818e612988565b61169391612d02565b60f01c9050604081018210156116be57505f975087965086955085945084935083925061173f915050565b5f81830390505f6020820390505f6020820390508d8d5f9083926116e493929190612988565b9b509b508d8d829084926116fa93929190612988565b61170391612d38565b99508d8d8390859261171793929190612988565b61172091612d38565b98508d8d8490879261173493929190612988565b975097505050505050505b9295509295509295565b60405161190160f01b8152600281019290925260228201526042902090565b5f365f365f6117778989611deb565b935093509350935061178d848484848b8b611f62565b9998505050505050505050565b5f6105ac848484611fb1565b5f306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156117fe57507f000000000000000000000000000000000000000000000000000000000000000046145b1561182857507f000000000000000000000000000000000000000000000000000000000000000090565b61080a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f6118de60208301358261202b565b60601c92915050565b5f6119086118f5848461191b565b611903610100860186612cc0565b61179a565b6119135760016105e9565b505f92915050565b5f6105e97f29a0bca4af4be3421398da00295e58e6d7de38cb492214754cb6a47507dd6f8e61194d6020860186612ca7565b602086013561195f6040880188612cc0565b60405161196d929190612d55565b6040519081900390206119836060890189612cc0565b604051611991929190612d55565b604051908190039020608089013560a08a013560c08b01356119b660e08d018d612cc0565b6040516119c4929190612d55565b60408051918290038220602083019a909a526001600160a01b03909816978101979097526060870195909552608086019390935260a085019190915260c084015260e08301526101008201526101208101919091526101400160405160208183030381529060405280519060200120612063565b60605f611a4483612075565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f818152600183016020526040812054611aba57508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556104fb565b505f6104fb565b60606105e98383855161209c565b5f8181526001830160205260408120548015611ba9575f611af1600183612d78565b85549091505f90611b0490600190612d78565b9050808214611b63575f865f018281548110611b2257611b22612c75565b905f5260205f200154905080875f018481548110611b4257611b42612c75565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080611b7457611b74612d8b565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506104fb565b5f9150506104fb565b5092915050565b5f803681611bca6014828789612988565b611bd391612a85565b60601c9350611be6603460148789612988565b611bef91612d38565b9250611bfe8560348189612988565b949793965094505050565b60605f5f866001600160a01b0316868686604051611c28929190612d55565b5f6040518083038185875af1925050503d805f8114611c62576040519150601f19603f3d011682016040523d82523d5f602084013e611c67565b606091505b509150915061178d8989848461211f565b365f826020811015611c9d5760405163eb0bcc5d60e01b815260040160405180910390fd5b5f611cab6020828789612988565b611cb491612d38565b9050601f198201811115611cdb5760405163eb0bcc5d60e01b815260040160405180910390fd5b5f611ceb6020830183888a612988565b611cf491612d38565b90506001600160401b03811180611d12575080602002602083850303105b15611d305760405163eb0bcc5d60e01b815260040160405180910390fd5b9501602001959350505050565b5f3681611d4d6014828688612988565b611d5691612a85565b60601c9250611d688460148188612988565b915091509250925092565b60605f5f856001600160a01b03168585604051611d91929190612d55565b5f60405180830381855af49150503d805f8114611dc9576040519150601f19603f3d011682016040523d82523d5f602084013e611dce565b606091505b5091509150611ddf8888848461211f565b98975050505050505050565b365f818185858015611f4a57602960f81b8282611e09600182612d78565b818110611e1857611e18612c75565b9050013560f81c60f81b6001600160f81b03191603611eb9575f5b81811015611eb3575f838383818110611e4e57611e4e612c75565b909101356001600160f81b031916915050601b60fb1b8101611e9657815f03611e775750611eb3565b611e83825f8587612988565b8b8b975097509750975050505050611f59565b611e9f816121c4565b15611eaa5750611eb3565b50600101611e33565b50611f4a565b805b8015611f48575f8383611ecf600185612d78565b818110611ede57611ede612c75565b909101356001600160f81b03191691505060d760f81b8101611f2357611f0683838187612988565b611f12845f8789612988565b975097509750975050505050611f59565b611f2c816121c4565b15611f375750611f48565b50611f4181612d9f565b9050611ebb565b505b5f805f80955095509550955050505b92959194509250565b5f8515611fa457611f7587878787612236565b8383604051602001611f8993929190612db4565b60405160208183030381529060405280519060200120611fa6565b5f5b979650505050505050565b5f5f5f611ff38686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061226e92505050565b509092509050306001600160a01b03831614801561202157505f81600381111561201f5761201f612dd4565b145b9695505050505050565b5f600c8260ff16111561205157604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b6001600160601b03191690565b5f6104fb61206f6117a6565b83611749565b5f60ff8216601f8111156104fb57604051632cd44ac360e21b815260040160405180910390fd5b82516060906120ab83826122b4565b92506120b784846122b4565b93505f6120c48585612d78565b6001600160401b038111156120db576120db6124b4565b6040519080825280601f01601f191660200182016040528015612105576020820181803683370190505b509050848403602086018701602083015e95945050505050565b606061212b845f610f6c565b156121405761213a83836122c3565b506121bc565b61214e84600160f81b610f6c565b156121975782612192577f2eea2f51f83910481f4b5ba28b7003a6e045d4b59f67dfff8d4c9011940500898583604051612189929190612de8565b60405180910390a15b6121bc565b6040516323a2408560e01b81526001600160f81b03198516600482015260240161042c565b509392505050565b5f6001600160f81b0319821615806121e957506001600160f81b03198216600160fd1b145b8061220157506001600160f81b03198216600b60fa1b145b8061221957506001600160f81b03198216600560fb1b145b806104fb57506001600160f81b03198216602960f81b1492915050565b5f8484848460405160200161224e9493929190612e00565b604051602081830303815290604052805190602001209050949350505050565b5f5f5f83516041036122a5576020840151604085015160608601515f1a612297888285856122df565b9550955095505050506111f1565b505081515f91506002906111f1565b5f8282188284100282186105e9565b6060826122d8576122d3826123a7565b6104fb565b50806104fb565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561231857505f9150600390508261239d565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612369573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b03811661239457505f92506001915082905061239d565b92505f91508190505b9450945094915050565b8051156123b75780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b6001600160e01b031981168114610a1f575f5ffd5b5f602082840312156123f5575f5ffd5b81356105e9816123d0565b80356001600160a01b0381168114612416575f5ffd5b919050565b5f5f83601f84011261242b575f5ffd5b5081356001600160401b03811115612441575f5ffd5b602083019150836020828501011115612458575f5ffd5b9250929050565b5f5f5f5f60608587031215612472575f5ffd5b8435935061248260208601612400565b925060408501356001600160401b0381111561249c575f5ffd5b6124a88782880161241b565b95989497509550505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b03811182821017156124f0576124f06124b4565b604052919050565b5f82601f830112612507575f5ffd5b81356001600160401b03811115612520576125206124b4565b612533601f8201601f19166020016124c8565b818152846020838601011115612547575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f5f60808587031215612576575f5ffd5b61257f85612400565b935061258d60208601612400565b92506040850135915060608501356001600160401b038111156125ae575f5ffd5b6125ba878288016124f8565b91505092959194509250565b5f5f5f604084860312156125d8575f5ffd5b8335925060208401356001600160401b038111156125f4575f5ffd5b6126008682870161241b565b9497909650939450505050565b5f5f5f6060848603121561261f575f5ffd5b83356001600160401b03811115612634575f5ffd5b84016101208187031215612646575f5ffd5b95602085013595506040909401359392505050565b5f6020828403121561266b575f5ffd5b81356001600160c01b03811681146105e9575f5ffd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60ff60f81b8816815260e060208201525f6126cd60e0830189612681565b82810360408401526126df8189612681565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015612734578351835260209384019390920191600101612716565b50909b9a5050505050505050505050565b602081525f6105e96020830184612681565b5f82601f830112612766575f5ffd5b81356001600160401b0381111561277f5761277f6124b4565b8060051b61278f602082016124c8565b918252602081850181019290810190868411156127aa575f5ffd5b6020860192505b838310156120215782358252602092830192909101906127b1565b5f5f5f5f5f60a086880312156127e0575f5ffd5b6127e986612400565b94506127f760208701612400565b935060408601356001600160401b03811115612811575f5ffd5b61281d88828901612757565b93505060608601356001600160401b03811115612838575f5ffd5b61284488828901612757565b92505060808601356001600160401b0381111561285f575f5ffd5b61286b888289016124f8565b9150509295509295909350565b5f60208284031215612888575f5ffd5b5035919050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156128e657603f198786030184526128d1858351612681565b945060209384019391909101906001016128b5565b50929695505050505050565b5f5f5f5f5f60a08688031215612906575f5ffd5b61290f86612400565b945061291d60208701612400565b9350604086013592506060860135915060808601356001600160401b0381111561285f575f5ffd5b8284823760609190911b6001600160601b0319169101908152601401919050565b5f81518060208401855e5f93019283525090919050565b5f6105e98284612966565b5f5f85851115612996575f5ffd5b838611156129a2575f5ffd5b5050820193919092039150565b80356001600160e01b03198116906004841015611bb2576001600160e01b031960049490940360031b84901b1690921692915050565b5f602082840312156129f5575f5ffd5b5051919050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201525f6120216060830184866129fc565b5f60208284031215612a5b575f5ffd5b81516105e9816123d0565b5f60208284031215612a76575f5ffd5b815180151581146105e9575f5ffd5b80356001600160601b03198116906014841015611bb2576001600160601b031960149490940360031b84901b1690921692915050565b5f5f8335601e19843603018112612ad0575f5ffd5b83016020810192503590506001600160401b03811115612aee575f5ffd5b803603821315612458575f5ffd5b60408152612b1d60408201612b1085612400565b6001600160a01b03169052565b602083013560608201525f612b356040850185612abb565b6101206080850152612b4c610160850182846129fc565b915050612b5c6060860186612abb565b848303603f190160a0860152612b738382846129fc565b608088013560c08781019190915260a089013560e08089019190915290890135610100880152909350612bab92508701905086612abb565b848303603f1901610120860152612bc38382846129fc565b92505050612bd5610100860186612abb565b848303603f1901610140860152612bed8382846129fc565b93505050508260208301529392505050565b600181811c90821680612c1357607f821691505b602082108103612c3157634e487b7160e01b5f52602260045260245ffd5b50919050565b805160208201516001600160e01b0319811691906004821015612c6e576001600160e01b0319600483900360031b81901b82161692505b5050919050565b634e487b7160e01b5f52603260045260245ffd5b5f8235605e19833603018112612c9d575f5ffd5b9190910192915050565b5f60208284031215612cb7575f5ffd5b6105e982612400565b5f5f8335601e19843603018112612cd5575f5ffd5b8301803591506001600160401b03821115612cee575f5ffd5b602001915036819003821315612458575f5ffd5b80356001600160f01b03198116906002841015611bb2576001600160f01b031960029490940360031b84901b1690921692915050565b803560208310156104fb575f19602084900360031b1b1692915050565b818382375f9101908152919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156104fb576104fb612d64565b634e487b7160e01b5f52603160045260245ffd5b5f81612dad57612dad612d64565b505f190190565b8381528260208201525f612dcb6040830184612966565b95945050505050565b634e487b7160e01b5f52602160045260245ffd5b828152604060208201525f6105ac6040830184612681565b6d0a8f2e0cac888c2e8c2a6d2cedc560931b81528385600e8301375f8482017f20636f6e74656e74732c737472696e67206e616d652c737472696e6720766572600e8201527f73696f6e2c75696e7432353620636861696e49642c6164647265737320766572602e8201527f696679696e67436f6e74726163742c627974657333322073616c742900000000604e8201528385606a8301375f9301606a01928352509094935050505056fe406f70656e7a657070656c696e2f636f6d6d756e6974792d636f6e7472616374732e4163636f756e74455243373537392e76302e302e30a264697066735822122094ff3f1a962d614e6ad81ed6843afb5985f374b36bad2305f5f5c4094eb3ebab64736f6c634300081c0033",
  "deployedBytecode": "0x608060405260043610610117575f3560e01c8063a71763a81161009f578063d691c96411610063578063d691c96414610347578063e9ae5c5314610367578063f23a6e611461037a578063f2c9ecd8146103a5578063f2dc691d146103b85761011e565b8063a71763a8146102a0578063b0d691fe146102bf578063bc197c81146102e9578063d03c791414610314578063d087d288146103335761011e565b806319822f7c116100e657806319822f7c146101eb5780633e1b08121461021857806384b0196e146102375780639517e29f1461025e5780639cfd7cff1461027f5761011e565b806301ffc9a714610136578063112d3a7d1461016a578063150b7a02146101895780631626ba7e146101cc5761011e565b3661011e57005b5f36606061012a6103d7565b80519350602001915050f35b348015610141575f5ffd5b506101556101503660046123e5565b6104cb565b60405190151581526020015b60405180910390f35b348015610175575f5ffd5b5061015561018436600461245f565b610501565b348015610194575f5ffd5b506101b36101a3366004612563565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610161565b3480156101d7575f5ffd5b506101b36101e63660046125c6565b6105b4565b3480156101f6575f5ffd5b5061020a61020536600461260d565b6105f0565b604051908152602001610161565b348015610223575f5ffd5b5061020a61023236600461265b565b61060f565b348015610242575f5ffd5b5061024b610698565b60405161016197969594939291906126af565b348015610269575f5ffd5b5061027d61027836600461245f565b6106da565b005b34801561028a575f5ffd5b50610293610728565b6040516101619190612745565b3480156102ab575f5ffd5b5061027d6102ba36600461245f565b610748565b3480156102ca575f5ffd5b506040516f71727de22e5e9d8baf0edac6f37da0328152602001610161565b3480156102f4575f5ffd5b506101b36103033660046127cc565b63bc197c8160e01b95945050505050565b34801561031f575f5ffd5b5061015561032e366004612878565b610790565b34801561033e575f5ffd5b5061020a610800565b61035a6103553660046125c6565b61080f565b604051610161919061288f565b61027d6103753660046125c6565b610839565b348015610385575f5ffd5b506101b36103943660046128f2565b63f23a6e6160e01b95945050505050565b3480156103b0575f5ffd5b50600161020a565b3480156103c3575f5ffd5b506101556103d2366004612878565b61084c565b60605f6103ee5f356001600160e01b031916610869565b90506001600160e01b03195f35166001600160a01b0382166104355760405163af5a720360e01b81526001600160e01b031990911660048201526024015b60405180910390fd5b505f5f826001600160a01b0316345f363360405160200161045893929190612945565b60408051601f19818403018152908290526104729161297d565b5f6040518083038185875af1925050503d805f81146104ac576040519150601f19603f3d011682016040523d82523d5f602084013e6104b1565b606091505b509150915081156104c3579392505050565b805160208201fd5b5f6001600160e01b03198216630271189760e51b14806104fb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b5f6001850361052c576001600160a01b0384165f9081526003602052604090205415155b90506105ac565b60028503610553576001600160a01b0384165f908152600560205260409020541515610525565b600385036105a9576001600160a01b03841660065f6105756004828789612988565b61057e916129af565b6001600160e01b031916815260208101919091526040015f20546001600160a01b03161490506105ac565b505f5b949350505050565b5f5f6105c185858561088d565b90506001600160e01b0319808216146105da57806105e5565b6105e585858561090a565b9150505b9392505050565b5f6105f96109e3565b5f6106048585610a22565b90506105ac83610a2d565b5f6f71727de22e5e9d8baf0edac6f37da032604051631aab3f0d60e11b81523060048201526001600160c01b03841660248201526001600160a01b0391909116906335567e1a90604401602060405180830381865afa158015610674573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104fb91906129e5565b5f6060805f5f5f60606106a9610a7e565b6106b1610aaa565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6106e2610ad7565b610722848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610b2a92505050565b50505050565b6060604051806060016040528060378152602001612eac60379139905090565b610750610ad7565b610722848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610d9492505050565b5f5f5f61079c84610f2e565b5050915091506107af825f60f81b610f6c565b806107c357506107c382600160f81b610f6c565b806107db57506107db826001600160f81b0319610f6c565b80156105ac57506107ec815f610f6c565b806105ac57506105ac81600160f81b610f6c565b5f61080a5f61060f565b905090565b606060025f8061082183338484610f7e565b61082c878787610fc5565b93505b5050509392505050565b610841610ad7565b610722838383610fc5565b5f600182148061085c5750600282145b806104fb57505060031490565b6001600160e01b0319165f908152600660205260409020546001600160a01b031690565b5f610899848484611063565b806108aa57506108aa84848461114f565b6108fa577f7739773977397739773977397739773977397739773977397739773977397739841480156108db575081155b6108ed576001600160e01b03196105ac565b637739000160e01b6105ac565b630b135d3f60e11b949350505050565b5f601482106109d2575f365f61092086866111c1565b919450925090506109346001845f80610501565b156109ce57604051637aa8f17760e11b81526001600160a01b0384169063f551e2ee9061096b9030908b9087908790600401612a24565b602060405180830381865afa9250505080156109a4575060408051601f3d908101601f191682019092526109a191810190612a4b565b60015b156109ce576374eca2c160e11b6001600160e01b03198216016109cc5793506105e992505050565b505b5050505b506001600160e01b03199392505050565b336f71727de22e5e9d8baf0edac6f37da0328114610a1f57604051637cf8632b60e01b81526001600160a01b038216600482015260240161042c565b50565b5f6105e983836111f8565b8015610a1f576040515f90339083908381818185875af1925050503d805f8114610a72576040519150601f19603f3d011682016040523d82523d5f602084013e610a77565b606091505b5050505050565b606061080a7f00000000000000000000000000000000000000000000000000000000000000005f61129c565b606061080a7f0000000000000000000000000000000000000000000000000000000000000000600161129c565b33308114801590610b0157506001600160a01b0381166f71727de22e5e9d8baf0edac6f37da03214155b15610a1f57604051637cf8632b60e01b81526001600160a01b038216600482015260240161042c565b610b338361084c565b8390610b55576040516360fa2b2360e01b815260040161042c91815260200190565b5060405163ecd0596160e01b8152600481018490526001600160a01b0383169063ecd0596190602401602060405180830381865afa158015610b99573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bbd9190612a66565b83839091610bf057604051638f89476f60e01b815260048101929092526001600160a01b0316602482015260440161042c565b505060018303610c3f57610c05600283611345565b83839091610c38576040516395d48a5b60e01b815260048101929092526001600160a01b0316602482015260440161042c565b5050610cf3565b60028303610c5257610c05600483611345565b60038303610cf3575f610c6482611359565b6001600160e01b031982165f90815260066020526040902054909350909150849084906001600160a01b031615610cc0576040516395d48a5b60e01b815260048101929092526001600160a01b0316602482015260440161042c565b50506001600160e01b0319165f90815260066020526040902080546001600160a01b0319166001600160a01b0384161790555b6040516306d61fe760e41b81526001600160a01b03831690636d61fe7090610d1f908490600401612745565b5f604051808303815f87803b158015610d36575f5ffd5b505af1158015610d48573d5f5f3e3d5ffd5b5050604080518681526001600160a01b03861660208201527fd21d0b289f126c4b473ea641963e766833c2f13866e4ff480abd787c100ef12393500190505b60405180910390a1505050565b60018303610de157610da7600283611379565b83839091610dda57604051631343d68d60e01b815260048101929092526001600160a01b0316602482015260440161042c565b5050610e96565b60028303610df457610da7600483611379565b60038303610e96575f610e0682611359565b925090506001600160a01b038316610e1d82610869565b6001600160a01b0316148015610e3b57506001600160a01b03831615155b84849091610e6e57604051631343d68d60e01b815260048101929092526001600160a01b0316602482015260440161042c565b50506001600160e01b0319165f90815260066020526040902080546001600160a01b03191690555b604051638a91b0e360e01b81526001600160a01b03831690638a91b0e390610ec2908490600401612745565b5f604051808303815f87803b158015610ed9575f5ffd5b505af1158015610eeb573d5f5f3e3d5ffd5b5050604080518681526001600160a01b03861660208201527f341347516a9de374859dfda710fa4828b2d48cb57d4fbe4c1149612b8e02276e9350019050610d87565b5f5f5f5f610f3c855f61138d565b610f4786600161138d565b610f528760066113c5565b610f5d88600a6113fd565b93509350935093509193509193565b6001600160f81b031990811691161490565b610f8a84848484610501565b84849091610fbd57604051631343d68d60e01b815260048101929092526001600160a01b0316602482015260440161042c565b505050505050565b60605f5f610fd286610f2e565b505091509150610fe5825f60f81b610f6c565b15610ffe57610ff5858583611438565b925050506105e9565b61100c82600160f81b610f6c565b1561101c57610ff58585836114b4565b61102e826001600160f81b0319610f6c565b1561103e57610ff58585836115da565b6040516358df354b60e11b81526001600160f81b03198316600482015260240161042c565b5f365f5f5f365f6110748989611650565b9550955095509550955095505f5f5f5f5f61108d610698565b5095509550955095509550506110ac888a61174990919063ffffffff16565b8f1480156110b957508515155b801561113c575061113c61113561112e89898c8a805190602001208a805190602001208a8a8a60405160200161111a959493929190948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b604051602081830303815290604052611768565b8b90611749565b8c8c61179a565b9f9e505050505050505050505050505050565b5f6105ac6111ba6111ac86604080517f983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de60208201529081018290525f90606001604051602081830303815290604052805190602001209050919050565b6111b46117a6565b90611749565b848461179a565b5f36816111d16014828688612988565b6111da91612a85565b60601c6111ea8560148189612988565b9250925092505b9250925092565b5f5f611203846118cf565b90506112126001825f80610501565b6112255761122084846118e7565b6105ac565b806001600160a01b031663970032038561123f878761191b565b6040518363ffffffff1660e01b815260040161125c929190612afc565b6020604051808303815f875af1158015611278573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ac91906129e5565b606060ff83146112b6576112af83611a38565b90506104fb565b8180546112c290612bff565b80601f01602080910402602001604051908101604052809291908181526020018280546112ee90612bff565b80156113395780601f1061131057610100808354040283529160200191611339565b820191905f5260205f20905b81548152906001019060200180831161131c57829003601f168201915b505050505090506104fb565b5f6105e9836001600160a01b038416611a75565b5f606061136583612c37565b611370846004611ac1565b91509150915091565b5f6105e9836001600160a01b038416611acf565b5f601f8260ff1611156113b357604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b6001600160f81b03191690565b5f601c8260ff1611156113eb57604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b6001600160e01b03191690565b5f600a8260ff16111561142357604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b69ffffffffffffffffffff191690565b60605f5f365f6114488888611bb9565b6040805160018082528183019092529498509296509094509250816020015b606081526020019060019003908161146757905050945061148c5f8786868686611c09565b855f8151811061149e5761149e612c75565b6020026020010181905250505050509392505050565b6060365f6114c28686611c78565b9092509050806001600160401b038111156114df576114df6124b4565b60405190808252806020026020018201604052801561151257816020015b60608152602001906001900390816114fd5790505b5092505f5b8181101561082f576115b5818685858581811061153657611536612c75565b90506020028101906115489190612c89565b611556906020810190612ca7565b86868681811061156857611568612c75565b905060200281019061157a9190612c89565b6020013587878781811061159057611590612c75565b90506020028101906115a29190612c89565b6115b0906040810190612cc0565b611c09565b8482815181106115c7576115c7612c75565b6020908102919091010152600101611517565b60605f365f6115e98787611d3d565b6040805160018082528183019092529396509194509250816020015b60608152602001906001900390816116055790505093506116295f86858585611d73565b845f8151811061163b5761163b612c75565b60200260200101819052505050509392505050565b365f8080838186600481101561167857505f955085945084935083925082915081905061173f565b60011981015f61168a8a83818e612988565b61169391612d02565b60f01c9050604081018210156116be57505f975087965086955085945084935083925061173f915050565b5f81830390505f6020820390505f6020820390508d8d5f9083926116e493929190612988565b9b509b508d8d829084926116fa93929190612988565b61170391612d38565b99508d8d8390859261171793929190612988565b61172091612d38565b98508d8d8490879261173493929190612988565b975097505050505050505b9295509295509295565b60405161190160f01b8152600281019290925260228201526042902090565b5f365f365f6117778989611deb565b935093509350935061178d848484848b8b611f62565b9998505050505050505050565b5f6105ac848484611fb1565b5f306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156117fe57507f000000000000000000000000000000000000000000000000000000000000000046145b1561182857507f000000000000000000000000000000000000000000000000000000000000000090565b61080a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b5f6118de60208301358261202b565b60601c92915050565b5f6119086118f5848461191b565b611903610100860186612cc0565b61179a565b6119135760016105e9565b505f92915050565b5f6105e97f29a0bca4af4be3421398da00295e58e6d7de38cb492214754cb6a47507dd6f8e61194d6020860186612ca7565b602086013561195f6040880188612cc0565b60405161196d929190612d55565b6040519081900390206119836060890189612cc0565b604051611991929190612d55565b604051908190039020608089013560a08a013560c08b01356119b660e08d018d612cc0565b6040516119c4929190612d55565b60408051918290038220602083019a909a526001600160a01b03909816978101979097526060870195909552608086019390935260a085019190915260c084015260e08301526101008201526101208101919091526101400160405160208183030381529060405280519060200120612063565b60605f611a4483612075565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f818152600183016020526040812054611aba57508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556104fb565b505f6104fb565b60606105e98383855161209c565b5f8181526001830160205260408120548015611ba9575f611af1600183612d78565b85549091505f90611b0490600190612d78565b9050808214611b63575f865f018281548110611b2257611b22612c75565b905f5260205f200154905080875f018481548110611b4257611b42612c75565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080611b7457611b74612d8b565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506104fb565b5f9150506104fb565b5092915050565b5f803681611bca6014828789612988565b611bd391612a85565b60601c9350611be6603460148789612988565b611bef91612d38565b9250611bfe8560348189612988565b949793965094505050565b60605f5f866001600160a01b0316868686604051611c28929190612d55565b5f6040518083038185875af1925050503d805f8114611c62576040519150601f19603f3d011682016040523d82523d5f602084013e611c67565b606091505b509150915061178d8989848461211f565b365f826020811015611c9d5760405163eb0bcc5d60e01b815260040160405180910390fd5b5f611cab6020828789612988565b611cb491612d38565b9050601f198201811115611cdb5760405163eb0bcc5d60e01b815260040160405180910390fd5b5f611ceb6020830183888a612988565b611cf491612d38565b90506001600160401b03811180611d12575080602002602083850303105b15611d305760405163eb0bcc5d60e01b815260040160405180910390fd5b9501602001959350505050565b5f3681611d4d6014828688612988565b611d5691612a85565b60601c9250611d688460148188612988565b915091509250925092565b60605f5f856001600160a01b03168585604051611d91929190612d55565b5f60405180830381855af49150503d805f8114611dc9576040519150601f19603f3d011682016040523d82523d5f602084013e611dce565b606091505b5091509150611ddf8888848461211f565b98975050505050505050565b365f818185858015611f4a57602960f81b8282611e09600182612d78565b818110611e1857611e18612c75565b9050013560f81c60f81b6001600160f81b03191603611eb9575f5b81811015611eb3575f838383818110611e4e57611e4e612c75565b909101356001600160f81b031916915050601b60fb1b8101611e9657815f03611e775750611eb3565b611e83825f8587612988565b8b8b975097509750975050505050611f59565b611e9f816121c4565b15611eaa5750611eb3565b50600101611e33565b50611f4a565b805b8015611f48575f8383611ecf600185612d78565b818110611ede57611ede612c75565b909101356001600160f81b03191691505060d760f81b8101611f2357611f0683838187612988565b611f12845f8789612988565b975097509750975050505050611f59565b611f2c816121c4565b15611f375750611f48565b50611f4181612d9f565b9050611ebb565b505b5f805f80955095509550955050505b92959194509250565b5f8515611fa457611f7587878787612236565b8383604051602001611f8993929190612db4565b60405160208183030381529060405280519060200120611fa6565b5f5b979650505050505050565b5f5f5f611ff38686868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061226e92505050565b509092509050306001600160a01b03831614801561202157505f81600381111561201f5761201f612dd4565b145b9695505050505050565b5f600c8260ff16111561205157604051631dd4bb1b60e11b815260040160405180910390fd5b506008021b6001600160601b03191690565b5f6104fb61206f6117a6565b83611749565b5f60ff8216601f8111156104fb57604051632cd44ac360e21b815260040160405180910390fd5b82516060906120ab83826122b4565b92506120b784846122b4565b93505f6120c48585612d78565b6001600160401b038111156120db576120db6124b4565b6040519080825280601f01601f191660200182016040528015612105576020820181803683370190505b509050848403602086018701602083015e95945050505050565b606061212b845f610f6c565b156121405761213a83836122c3565b506121bc565b61214e84600160f81b610f6c565b156121975782612192577f2eea2f51f83910481f4b5ba28b7003a6e045d4b59f67dfff8d4c9011940500898583604051612189929190612de8565b60405180910390a15b6121bc565b6040516323a2408560e01b81526001600160f81b03198516600482015260240161042c565b509392505050565b5f6001600160f81b0319821615806121e957506001600160f81b03198216600160fd1b145b8061220157506001600160f81b03198216600b60fa1b145b8061221957506001600160f81b03198216600560fb1b145b806104fb57506001600160f81b03198216602960f81b1492915050565b5f8484848460405160200161224e9493929190612e00565b604051602081830303815290604052805190602001209050949350505050565b5f5f5f83516041036122a5576020840151604085015160608601515f1a612297888285856122df565b9550955095505050506111f1565b505081515f91506002906111f1565b5f8282188284100282186105e9565b6060826122d8576122d3826123a7565b6104fb565b50806104fb565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561231857505f9150600390508261239d565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612369573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b03811661239457505f92506001915082905061239d565b92505f91508190505b9450945094915050565b8051156123b75780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b6001600160e01b031981168114610a1f575f5ffd5b5f602082840312156123f5575f5ffd5b81356105e9816123d0565b80356001600160a01b0381168114612416575f5ffd5b919050565b5f5f83601f84011261242b575f5ffd5b5081356001600160401b03811115612441575f5ffd5b602083019150836020828501011115612458575f5ffd5b9250929050565b5f5f5f5f60608587031215612472575f5ffd5b8435935061248260208601612400565b925060408501356001600160401b0381111561249c575f5ffd5b6124a88782880161241b565b95989497509550505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b03811182821017156124f0576124f06124b4565b604052919050565b5f82601f830112612507575f5ffd5b81356001600160401b03811115612520576125206124b4565b612533601f8201601f19166020016124c8565b818152846020838601011115612547575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f5f60808587031215612576575f5ffd5b61257f85612400565b935061258d60208601612400565b92506040850135915060608501356001600160401b038111156125ae575f5ffd5b6125ba878288016124f8565b91505092959194509250565b5f5f5f604084860312156125d8575f5ffd5b8335925060208401356001600160401b038111156125f4575f5ffd5b6126008682870161241b565b9497909650939450505050565b5f5f5f6060848603121561261f575f5ffd5b83356001600160401b03811115612634575f5ffd5b84016101208187031215612646575f5ffd5b95602085013595506040909401359392505050565b5f6020828403121561266b575f5ffd5b81356001600160c01b03811681146105e9575f5ffd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60ff60f81b8816815260e060208201525f6126cd60e0830189612681565b82810360408401526126df8189612681565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015612734578351835260209384019390920191600101612716565b50909b9a5050505050505050505050565b602081525f6105e96020830184612681565b5f82601f830112612766575f5ffd5b81356001600160401b0381111561277f5761277f6124b4565b8060051b61278f602082016124c8565b918252602081850181019290810190868411156127aa575f5ffd5b6020860192505b838310156120215782358252602092830192909101906127b1565b5f5f5f5f5f60a086880312156127e0575f5ffd5b6127e986612400565b94506127f760208701612400565b935060408601356001600160401b03811115612811575f5ffd5b61281d88828901612757565b93505060608601356001600160401b03811115612838575f5ffd5b61284488828901612757565b92505060808601356001600160401b0381111561285f575f5ffd5b61286b888289016124f8565b9150509295509295909350565b5f60208284031215612888575f5ffd5b5035919050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156128e657603f198786030184526128d1858351612681565b945060209384019391909101906001016128b5565b50929695505050505050565b5f5f5f5f5f60a08688031215612906575f5ffd5b61290f86612400565b945061291d60208701612400565b9350604086013592506060860135915060808601356001600160401b0381111561285f575f5ffd5b8284823760609190911b6001600160601b0319169101908152601401919050565b5f81518060208401855e5f93019283525090919050565b5f6105e98284612966565b5f5f85851115612996575f5ffd5b838611156129a2575f5ffd5b5050820193919092039150565b80356001600160e01b03198116906004841015611bb2576001600160e01b031960049490940360031b84901b1690921692915050565b5f602082840312156129f5575f5ffd5b5051919050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201525f6120216060830184866129fc565b5f60208284031215612a5b575f5ffd5b81516105e9816123d0565b5f60208284031215612a76575f5ffd5b815180151581146105e9575f5ffd5b80356001600160601b03198116906014841015611bb2576001600160601b031960149490940360031b84901b1690921692915050565b5f5f8335601e19843603018112612ad0575f5ffd5b83016020810192503590506001600160401b03811115612aee575f5ffd5b803603821315612458575f5ffd5b60408152612b1d60408201612b1085612400565b6001600160a01b03169052565b602083013560608201525f612b356040850185612abb565b6101206080850152612b4c610160850182846129fc565b915050612b5c6060860186612abb565b848303603f190160a0860152612b738382846129fc565b608088013560c08781019190915260a089013560e08089019190915290890135610100880152909350612bab92508701905086612abb565b848303603f1901610120860152612bc38382846129fc565b92505050612bd5610100860186612abb565b848303603f1901610140860152612bed8382846129fc565b93505050508260208301529392505050565b600181811c90821680612c1357607f821691505b602082108103612c3157634e487b7160e01b5f52602260045260245ffd5b50919050565b805160208201516001600160e01b0319811691906004821015612c6e576001600160e01b0319600483900360031b81901b82161692505b5050919050565b634e487b7160e01b5f52603260045260245ffd5b5f8235605e19833603018112612c9d575f5ffd5b9190910192915050565b5f60208284031215612cb7575f5ffd5b6105e982612400565b5f5f8335601e19843603018112612cd5575f5ffd5b8301803591506001600160401b03821115612cee575f5ffd5b602001915036819003821315612458575f5ffd5b80356001600160f01b03198116906002841015611bb2576001600160f01b031960029490940360031b84901b1690921692915050565b803560208310156104fb575f19602084900360031b1b1692915050565b818382375f9101908152919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156104fb576104fb612d64565b634e487b7160e01b5f52603160045260245ffd5b5f81612dad57612dad612d64565b505f190190565b8381528260208201525f612dcb6040830184612966565b95945050505050565b634e487b7160e01b5f52602160045260245ffd5b828152604060208201525f6105ac6040830184612681565b6d0a8f2e0cac888c2e8c2a6d2cedc560931b81528385600e8301375f8482017f20636f6e74656e74732c737472696e67206e616d652c737472696e6720766572600e8201527f73696f6e2c75696e7432353620636861696e49642c6164647265737320766572602e8201527f696679696e67436f6e74726163742c627974657333322073616c742900000000604e8201528385606a8301375f9301606a01928352509094935050505056fe406f70656e7a657070656c696e2f636f6d6d756e6974792d636f6e7472616374732e4163636f756e74455243373537392e76302e302e30a264697066735822122094ff3f1a962d614e6ad81ed6843afb5985f374b36bad2305f5f5c4094eb3ebab64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AccountUnauthorized(address)": [
        {
          "details": "Unauthorized call to the account."
        }
      ],
      "ERC7579AlreadyInstalledModule(uint256,address)": [
        {
          "details": "The module is already installed."
        }
      ],
      "ERC7579DecodingError()": [
        {
          "details": "Input calldata not properly formatted and possibly malicious."
        }
      ],
      "ERC7579MismatchedModuleTypeId(uint256,address)": [
        {
          "details": "The provided module doesn't match the provided module type."
        }
      ],
      "ERC7579MissingFallbackHandler(bytes4)": [
        {
          "details": "The account's {fallback} was called with a selector that doesn't have an installed handler."
        }
      ],
      "ERC7579UninstalledModule(uint256,address)": [
        {
          "details": "The module is not installed."
        }
      ],
      "ERC7579UnsupportedCallType(bytes1)": [
        {
          "details": "The provided {CallType} is not supported."
        }
      ],
      "ERC7579UnsupportedExecType(bytes1)": [
        {
          "details": "The provided {ExecType} is not supported."
        }
      ],
      "ERC7579UnsupportedModuleType(uint256)": [
        {
          "details": "The module type is not supported."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "ERC7579TryExecuteFail(uint256,bytes)": {
        "details": "Emits when an {EXECTYPE_TRY} execution fails.",
        "params": {
          "batchExecutionIndex": "The index of the failed call in the execution batch.",
          "returndata": "The returned data from the failed call."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "accountId()": {
        "details": "Returns the account id of the smart account",
        "returns": {
          "_0": "the account id of the smart account MUST return a non-empty string The accountId SHOULD be structured like so:        \"vendorname.accountname.semver\" The id SHOULD be unique across all smart accounts"
        }
      },
      "eip712Domain()": {
        "details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
      },
      "entryPoint()": {
        "details": "Canonical entry point for the account that forwards and validates user operations."
      },
      "execute(bytes32,bytes)": {
        "details": "Executes a transaction on behalf of the account.",
        "params": {
          "executionCalldata": "The encoded execution call data MUST ensure adequate authorization control: e.g. onlyEntryPointOrSelf if used with ERC-4337 If a mode is requested that is not supported by the Account, it MUST revert",
          "mode": "The encoded execution mode of the transaction. See ModeLib.sol for details"
        }
      },
      "executeFromExecutor(bytes32,bytes)": {
        "details": "Executes a transaction on behalf of the account.         This function is intended to be called by Executor Modules",
        "params": {
          "executionCalldata": "The encoded execution call data",
          "mode": "The encoded execution mode of the transaction. See ModeLib.sol for details"
        },
        "returns": {
          "returnData": "An array with the returned data of each executed subcall MUST ensure adequate authorization control: i.e. onlyExecutorModule If a mode is requested that is not supported by the Account, it MUST revert"
        }
      },
      "getNonce()": {
        "details": "Return the account nonce for the canonical sequence."
      },
      "getNonce(uint192)": {
        "details": "Return the account nonce for a given sequence (key)."
      },
      "installModule(uint256,address,bytes)": {
        "details": "Installs a Module of a certain type on the smart account",
        "params": {
          "initData": "arbitrary data that may be required on the module during `onInstall` initialization. MUST implement authorization control MUST call `onInstall` on the module with the `initData` parameter if provided MUST emit ModuleInstalled event MUST revert if the module is already installed or the initialization on the module failed",
          "module": "the module address",
          "moduleTypeId": "the module type ID according to the ERC-7579 spec"
        }
      },
      "isModuleInstalled(uint256,address,bytes)": {
        "details": "Returns whether a module is installed on the smart account",
        "params": {
          "additionalContext": "arbitrary data that may be required to determine if the module is installed MUST return true if the module is installed and false otherwise",
          "module": "the module address",
          "moduleTypeId": "the module type ID according the ERC-7579 spec"
        }
      },
      "isValidSignature(bytes32,bytes)": {
        "details": "Resolve implementation of ERC-1271 by both ERC7739 and AccountERC7579 to support both schemes."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsExecutionMode(bytes32)": {
        "details": "Supported call types: * Single (`0x00`): A single transaction execution. * Batch (`0x01`): A batch of transactions execution. * Delegate (`0xff`): A delegate call execution. Supported exec types: * Default (`0x00`): Default execution type (revert on failure). * Try (`0x01`): Try execution type (emits ERC7579TryExecuteFail on failure).",
        "params": {
          "encodedMode": "the encoded mode MUST return true if the account supports the mode and false otherwise"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "supportsModule(uint256)": {
        "details": "Supported module types: * Validator: A module used during the validation phase to determine if a transaction is valid and should be executed on the account. * Executor: A module that can execute transactions on behalf of the smart account via a callback. * Fallback Handler: A module that can extend the fallback functionality of a smart account.",
        "params": {
          "moduleTypeId": "the module type ID according to the ERC-7579 spec MUST return true if the account supports the module type and false otherwise"
        }
      },
      "uninstallModule(uint256,address,bytes)": {
        "details": "Uninstalls a Module of a certain type on the smart account",
        "params": {
          "deInitData": "arbitrary data that may be required on the module during `onInstall` initialization. MUST implement authorization control MUST call `onUninstall` on the module with the `deInitData` parameter if provided MUST emit ModuleUninstalled event MUST revert if the module is not installed or the deInitialization on the module failed",
          "module": "the module address",
          "moduleTypeId": "the module type ID according the ERC-7579 spec"
        }
      },
      "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)": {
        "details": "Validates a user operation. * MUST validate the caller is a trusted EntryPoint * MUST validate that the signature is a valid signature of the userOpHash, and SHOULD   return SIG_VALIDATION_FAILED (and not revert) on signature mismatch. Any other error MUST revert. * MUST pay the entryPoint (caller) at least the “missingAccountFunds” (which might   be zero, in case the current account’s deposit is high enough) Returns an encoded packed validation data that is composed of the following elements: - `authorizer` (`address`): 0 for success, 1 for failure, otherwise the address of an authorizer contract - `validUntil` (`uint48`): The UserOp is valid only up to this time. Zero for “infinite”. - `validAfter` (`uint48`): The UserOp is valid only after this time."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11288,
        "contract": "contracts/ModularAccount.sol:ModularAccount",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11290,
        "contract": "contracts/ModularAccount.sol:ModularAccount",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 354,
        "contract": "contracts/ModularAccount.sol:ModularAccount",
        "label": "_validators",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)15622_storage"
      },
      {
        "astId": 357,
        "contract": "contracts/ModularAccount.sol:ModularAccount",
        "label": "_executors",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)15622_storage"
      },
      {
        "astId": 361,
        "contract": "contracts/ModularAccount.sol:ModularAccount",
        "label": "_fallbacks",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes4,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)15622_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 15621,
            "contract": "contracts/ModularAccount.sol:ModularAccount",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)15251_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)15251_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 15246,
            "contract": "contracts/ModularAccount.sol:ModularAccount",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 15250,
            "contract": "contracts/ModularAccount.sol:ModularAccount",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}